
SerialCOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a24  08007a24  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08007a24  08007a24  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a24  08007a24  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  20000180  08007bac  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001344  08007bac  00021344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c67c  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289d  00000000  00000000  0002c825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001961b  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da3b  00000000  00000000  00049a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084870  00000000  00000000  00057496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbd06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  000dbd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08007984 	.word	0x08007984

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08007984 	.word	0x08007984

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b598      	push	{r3, r4, r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 f956 	bl	8000410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f818 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f870 	bl	800024c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016c:	f006 ff1e 	bl	8006fac <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS((uint8_t *)data, strlen(data));
 8000170:	4b08      	ldr	r3, [pc, #32]	; (8000194 <main+0x38>)
 8000172:	681c      	ldr	r4, [r3, #0]
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <main+0x38>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4618      	mov	r0, r3
 800017a:	f7ff ffe7 	bl	800014c <strlen>
 800017e:	4603      	mov	r3, r0
 8000180:	b29b      	uxth	r3, r3
 8000182:	4619      	mov	r1, r3
 8000184:	4620      	mov	r0, r4
 8000186:	f006 fff3 	bl	8007170 <CDC_Transmit_FS>
	  HAL_Delay(100);
 800018a:	2064      	movs	r0, #100	; 0x64
 800018c:	f000 f9a2 	bl	80004d4 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *)data, strlen(data));
 8000190:	e7ee      	b.n	8000170 <main+0x14>
 8000192:	bf00      	nop
 8000194:	20000000 	.word	0x20000000

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b094      	sub	sp, #80	; 0x50
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f007 fbe4 	bl	8007974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	f107 0314 	add.w	r3, r7, #20
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f902 	bl	80023f8 <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001fa:	f000 f873 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fb6e 	bl	80028fc <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000226:	f000 f85d 	bl	80002e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800022a:	2310      	movs	r3, #16
 800022c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fcc7 	bl	8002bc8 <HAL_RCCEx_PeriphCLKConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000240:	f000 f850 	bl	80002e4 <Error_Handler>
  }
}
 8000244:	bf00      	nop
 8000246:	3750      	adds	r7, #80	; 0x50
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000260:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <MX_GPIO_Init+0x90>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <MX_GPIO_Init+0x90>)
 8000266:	f043 0310 	orr.w	r3, r3, #16
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <MX_GPIO_Init+0x90>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0310 	and.w	r3, r3, #16
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_GPIO_Init+0x90>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <MX_GPIO_Init+0x90>)
 800027e:	f043 0320 	orr.w	r3, r3, #32
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_GPIO_Init+0x90>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0320 	and.w	r3, r3, #32
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_GPIO_Init+0x90>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <MX_GPIO_Init+0x90>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_GPIO_Init+0x90>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0304 	and.w	r3, r3, #4
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <MX_GPIO_Init+0x94>)
 80002b0:	f000 fbc6 	bl	8000a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4619      	mov	r1, r3
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_GPIO_Init+0x94>)
 80002ce:	f000 fa33 	bl	8000738 <HAL_GPIO_Init>

}
 80002d2:	bf00      	nop
 80002d4:	3720      	adds	r7, #32
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40011000 	.word	0x40011000

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	e7fe      	b.n	80002ec <Error_Handler+0x8>
	...

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	; (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <NMI_Handler+0x4>

0800035a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035e:	e7fe      	b.n	800035e <HardFault_Handler+0x4>

08000360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <MemManage_Handler+0x4>

08000366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800036a:	e7fe      	b.n	800036a <BusFault_Handler+0x4>

0800036c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000370:	e7fe      	b.n	8000370 <UsageFault_Handler+0x4>

08000372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000382:	bf00      	nop
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039a:	f000 f87f 	bl	800049c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003a8:	4802      	ldr	r0, [pc, #8]	; (80003b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003aa:	f000 fc92 	bl	8000cd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000e38 	.word	0x20000e38

080003b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	; (80003fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ea:	f7ff ffe5 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f007 fa9d 	bl	800792c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff feb3 	bl	800015c <main>
  bx lr
 80003f6:	4770      	bx	lr
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000400:	08007a2c 	.word	0x08007a2c
  ldr r2, =_sbss
 8000404:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000408:	20001344 	.word	0x20001344

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HAL_Init+0x28>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a07      	ldr	r2, [pc, #28]	; (8000438 <HAL_Init+0x28>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000420:	2003      	movs	r0, #3
 8000422:	f000 f947 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	200f      	movs	r0, #15
 8000428:	f000 f808 	bl	800043c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800042c:	f7ff ff60 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40022000 	.word	0x40022000

0800043c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_InitTick+0x54>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_InitTick+0x58>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4619      	mov	r1, r3
 800044e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000452:	fbb3 f3f1 	udiv	r3, r3, r1
 8000456:	fbb2 f3f3 	udiv	r3, r2, r3
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f95f 	bl	800071e <HAL_SYSTICK_Config>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000466:	2301      	movs	r3, #1
 8000468:	e00e      	b.n	8000488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	d80a      	bhi.n	8000486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000470:	2200      	movs	r2, #0
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000478:	f000 f927 	bl	80006ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <HAL_InitTick+0x5c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000482:	2300      	movs	r3, #0
 8000484:	e000      	b.n	8000488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000486:	2301      	movs	r3, #1
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000004 	.word	0x20000004
 8000494:	2000000c 	.word	0x2000000c
 8000498:	20000008 	.word	0x20000008

0800049c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <HAL_IncTick+0x1c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_IncTick+0x20>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4413      	add	r3, r2
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <HAL_IncTick+0x20>)
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	2000019c 	.word	0x2000019c

080004c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return uwTick;
 80004c4:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <HAL_GetTick+0x10>)
 80004c6:	681b      	ldr	r3, [r3, #0]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	2000019c 	.word	0x2000019c

080004d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004dc:	f7ff fff0 	bl	80004c0 <HAL_GetTick>
 80004e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004ec:	d005      	beq.n	80004fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_Delay+0x44>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4413      	add	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004fa:	bf00      	nop
 80004fc:	f7ff ffe0 	bl	80004c0 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	429a      	cmp	r2, r3
 800050a:	d8f7      	bhi.n	80004fc <HAL_Delay+0x28>
  {
  }
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000000c 	.word	0x2000000c

0800051c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000538:	4013      	ands	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	60d3      	str	r3, [r2, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <__NVIC_GetPriorityGrouping+0x18>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	f003 0307 	and.w	r3, r3, #7
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	db0b      	blt.n	80005aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 021f 	and.w	r2, r3, #31
 8000598:	4906      	ldr	r1, [pc, #24]	; (80005b4 <__NVIC_EnableIRQ+0x34>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	095b      	lsrs	r3, r3, #5
 80005a0:	2001      	movs	r0, #1
 80005a2:	fa00 f202 	lsl.w	r2, r0, r2
 80005a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	e000e100 	.word	0xe000e100

080005b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db0a      	blt.n	80005e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	490c      	ldr	r1, [pc, #48]	; (8000604 <__NVIC_SetPriority+0x4c>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	0112      	lsls	r2, r2, #4
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	440b      	add	r3, r1
 80005dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e0:	e00a      	b.n	80005f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4908      	ldr	r1, [pc, #32]	; (8000608 <__NVIC_SetPriority+0x50>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	3b04      	subs	r3, #4
 80005f0:	0112      	lsls	r2, r2, #4
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	440b      	add	r3, r1
 80005f6:	761a      	strb	r2, [r3, #24]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	f1c3 0307 	rsb	r3, r3, #7
 8000626:	2b04      	cmp	r3, #4
 8000628:	bf28      	it	cs
 800062a:	2304      	movcs	r3, #4
 800062c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3304      	adds	r3, #4
 8000632:	2b06      	cmp	r3, #6
 8000634:	d902      	bls.n	800063c <NVIC_EncodePriority+0x30>
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3b03      	subs	r3, #3
 800063a:	e000      	b.n	800063e <NVIC_EncodePriority+0x32>
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	43da      	mvns	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	401a      	ands	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43d9      	mvns	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	4313      	orrs	r3, r2
         );
}
 8000666:	4618      	mov	r0, r3
 8000668:	3724      	adds	r7, #36	; 0x24
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000680:	d301      	bcc.n	8000686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2301      	movs	r3, #1
 8000684:	e00f      	b.n	80006a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <SysTick_Config+0x40>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800068e:	210f      	movs	r1, #15
 8000690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000694:	f7ff ff90 	bl	80005b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <SysTick_Config+0x40>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <SysTick_Config+0x40>)
 80006a0:	2207      	movs	r2, #7
 80006a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	e000e010 	.word	0xe000e010

080006b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff2d 	bl	800051c <__NVIC_SetPriorityGrouping>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006dc:	f7ff ff42 	bl	8000564 <__NVIC_GetPriorityGrouping>
 80006e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	6978      	ldr	r0, [r7, #20]
 80006e8:	f7ff ff90 	bl	800060c <NVIC_EncodePriority>
 80006ec:	4602      	mov	r2, r0
 80006ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff5f 	bl	80005b8 <__NVIC_SetPriority>
}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff35 	bl	8000580 <__NVIC_EnableIRQ>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ffa2 	bl	8000670 <SysTick_Config>
 800072c:	4603      	mov	r3, r0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000738:	b480      	push	{r7}
 800073a:	b08b      	sub	sp, #44	; 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800074a:	e169      	b.n	8000a20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800074c:	2201      	movs	r2, #1
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	4013      	ands	r3, r2
 800075e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000760:	69ba      	ldr	r2, [r7, #24]
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	429a      	cmp	r2, r3
 8000766:	f040 8158 	bne.w	8000a1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	4a9a      	ldr	r2, [pc, #616]	; (80009d8 <HAL_GPIO_Init+0x2a0>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d05e      	beq.n	8000832 <HAL_GPIO_Init+0xfa>
 8000774:	4a98      	ldr	r2, [pc, #608]	; (80009d8 <HAL_GPIO_Init+0x2a0>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d875      	bhi.n	8000866 <HAL_GPIO_Init+0x12e>
 800077a:	4a98      	ldr	r2, [pc, #608]	; (80009dc <HAL_GPIO_Init+0x2a4>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d058      	beq.n	8000832 <HAL_GPIO_Init+0xfa>
 8000780:	4a96      	ldr	r2, [pc, #600]	; (80009dc <HAL_GPIO_Init+0x2a4>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d86f      	bhi.n	8000866 <HAL_GPIO_Init+0x12e>
 8000786:	4a96      	ldr	r2, [pc, #600]	; (80009e0 <HAL_GPIO_Init+0x2a8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d052      	beq.n	8000832 <HAL_GPIO_Init+0xfa>
 800078c:	4a94      	ldr	r2, [pc, #592]	; (80009e0 <HAL_GPIO_Init+0x2a8>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d869      	bhi.n	8000866 <HAL_GPIO_Init+0x12e>
 8000792:	4a94      	ldr	r2, [pc, #592]	; (80009e4 <HAL_GPIO_Init+0x2ac>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d04c      	beq.n	8000832 <HAL_GPIO_Init+0xfa>
 8000798:	4a92      	ldr	r2, [pc, #584]	; (80009e4 <HAL_GPIO_Init+0x2ac>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d863      	bhi.n	8000866 <HAL_GPIO_Init+0x12e>
 800079e:	4a92      	ldr	r2, [pc, #584]	; (80009e8 <HAL_GPIO_Init+0x2b0>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d046      	beq.n	8000832 <HAL_GPIO_Init+0xfa>
 80007a4:	4a90      	ldr	r2, [pc, #576]	; (80009e8 <HAL_GPIO_Init+0x2b0>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d85d      	bhi.n	8000866 <HAL_GPIO_Init+0x12e>
 80007aa:	2b12      	cmp	r3, #18
 80007ac:	d82a      	bhi.n	8000804 <HAL_GPIO_Init+0xcc>
 80007ae:	2b12      	cmp	r3, #18
 80007b0:	d859      	bhi.n	8000866 <HAL_GPIO_Init+0x12e>
 80007b2:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <HAL_GPIO_Init+0x80>)
 80007b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b8:	08000833 	.word	0x08000833
 80007bc:	0800080d 	.word	0x0800080d
 80007c0:	0800081f 	.word	0x0800081f
 80007c4:	08000861 	.word	0x08000861
 80007c8:	08000867 	.word	0x08000867
 80007cc:	08000867 	.word	0x08000867
 80007d0:	08000867 	.word	0x08000867
 80007d4:	08000867 	.word	0x08000867
 80007d8:	08000867 	.word	0x08000867
 80007dc:	08000867 	.word	0x08000867
 80007e0:	08000867 	.word	0x08000867
 80007e4:	08000867 	.word	0x08000867
 80007e8:	08000867 	.word	0x08000867
 80007ec:	08000867 	.word	0x08000867
 80007f0:	08000867 	.word	0x08000867
 80007f4:	08000867 	.word	0x08000867
 80007f8:	08000867 	.word	0x08000867
 80007fc:	08000815 	.word	0x08000815
 8000800:	08000829 	.word	0x08000829
 8000804:	4a79      	ldr	r2, [pc, #484]	; (80009ec <HAL_GPIO_Init+0x2b4>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d013      	beq.n	8000832 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800080a:	e02c      	b.n	8000866 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	623b      	str	r3, [r7, #32]
          break;
 8000812:	e029      	b.n	8000868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	3304      	adds	r3, #4
 800081a:	623b      	str	r3, [r7, #32]
          break;
 800081c:	e024      	b.n	8000868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	3308      	adds	r3, #8
 8000824:	623b      	str	r3, [r7, #32]
          break;
 8000826:	e01f      	b.n	8000868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	330c      	adds	r3, #12
 800082e:	623b      	str	r3, [r7, #32]
          break;
 8000830:	e01a      	b.n	8000868 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d102      	bne.n	8000840 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800083a:	2304      	movs	r3, #4
 800083c:	623b      	str	r3, [r7, #32]
          break;
 800083e:	e013      	b.n	8000868 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d105      	bne.n	8000854 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000848:	2308      	movs	r3, #8
 800084a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	611a      	str	r2, [r3, #16]
          break;
 8000852:	e009      	b.n	8000868 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000854:	2308      	movs	r3, #8
 8000856:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	615a      	str	r2, [r3, #20]
          break;
 800085e:	e003      	b.n	8000868 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
          break;
 8000864:	e000      	b.n	8000868 <HAL_GPIO_Init+0x130>
          break;
 8000866:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	2bff      	cmp	r3, #255	; 0xff
 800086c:	d801      	bhi.n	8000872 <HAL_GPIO_Init+0x13a>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	e001      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3304      	adds	r3, #4
 8000876:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	2bff      	cmp	r3, #255	; 0xff
 800087c:	d802      	bhi.n	8000884 <HAL_GPIO_Init+0x14c>
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	e002      	b.n	800088a <HAL_GPIO_Init+0x152>
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	3b08      	subs	r3, #8
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	210f      	movs	r1, #15
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	401a      	ands	r2, r3
 800089c:	6a39      	ldr	r1, [r7, #32]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	431a      	orrs	r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 80b1 	beq.w	8000a1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008b8:	4b4d      	ldr	r3, [pc, #308]	; (80009f0 <HAL_GPIO_Init+0x2b8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a4c      	ldr	r2, [pc, #304]	; (80009f0 <HAL_GPIO_Init+0x2b8>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <HAL_GPIO_Init+0x2b8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008d0:	4a48      	ldr	r2, [pc, #288]	; (80009f4 <HAL_GPIO_Init+0x2bc>)
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	3302      	adds	r3, #2
 80008d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	220f      	movs	r2, #15
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	4013      	ands	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a40      	ldr	r2, [pc, #256]	; (80009f8 <HAL_GPIO_Init+0x2c0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d013      	beq.n	8000924 <HAL_GPIO_Init+0x1ec>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a3f      	ldr	r2, [pc, #252]	; (80009fc <HAL_GPIO_Init+0x2c4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d00d      	beq.n	8000920 <HAL_GPIO_Init+0x1e8>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a3e      	ldr	r2, [pc, #248]	; (8000a00 <HAL_GPIO_Init+0x2c8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d007      	beq.n	800091c <HAL_GPIO_Init+0x1e4>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a3d      	ldr	r2, [pc, #244]	; (8000a04 <HAL_GPIO_Init+0x2cc>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d101      	bne.n	8000918 <HAL_GPIO_Init+0x1e0>
 8000914:	2303      	movs	r3, #3
 8000916:	e006      	b.n	8000926 <HAL_GPIO_Init+0x1ee>
 8000918:	2304      	movs	r3, #4
 800091a:	e004      	b.n	8000926 <HAL_GPIO_Init+0x1ee>
 800091c:	2302      	movs	r3, #2
 800091e:	e002      	b.n	8000926 <HAL_GPIO_Init+0x1ee>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <HAL_GPIO_Init+0x1ee>
 8000924:	2300      	movs	r3, #0
 8000926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000928:	f002 0203 	and.w	r2, r2, #3
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	4093      	lsls	r3, r2
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4313      	orrs	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000936:	492f      	ldr	r1, [pc, #188]	; (80009f4 <HAL_GPIO_Init+0x2bc>)
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	3302      	adds	r3, #2
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d006      	beq.n	800095e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000950:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	492c      	ldr	r1, [pc, #176]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	4313      	orrs	r3, r2
 800095a:	600b      	str	r3, [r1, #0]
 800095c:	e006      	b.n	800096c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	43db      	mvns	r3, r3
 8000966:	4928      	ldr	r1, [pc, #160]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 8000968:	4013      	ands	r3, r2
 800096a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	4922      	ldr	r1, [pc, #136]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	604b      	str	r3, [r1, #4]
 8000984:	e006      	b.n	8000994 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	43db      	mvns	r3, r3
 800098e:	491e      	ldr	r1, [pc, #120]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 8000990:	4013      	ands	r3, r2
 8000992:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	4918      	ldr	r1, [pc, #96]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	608b      	str	r3, [r1, #8]
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	4914      	ldr	r1, [pc, #80]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d021      	beq.n	8000a0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	490e      	ldr	r1, [pc, #56]	; (8000a08 <HAL_GPIO_Init+0x2d0>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60cb      	str	r3, [r1, #12]
 80009d4:	e021      	b.n	8000a1a <HAL_GPIO_Init+0x2e2>
 80009d6:	bf00      	nop
 80009d8:	10320000 	.word	0x10320000
 80009dc:	10310000 	.word	0x10310000
 80009e0:	10220000 	.word	0x10220000
 80009e4:	10210000 	.word	0x10210000
 80009e8:	10120000 	.word	0x10120000
 80009ec:	10110000 	.word	0x10110000
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010000 	.word	0x40010000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40011000 	.word	0x40011000
 8000a04:	40011400 	.word	0x40011400
 8000a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_GPIO_Init+0x304>)
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	4909      	ldr	r1, [pc, #36]	; (8000a3c <HAL_GPIO_Init+0x304>)
 8000a16:	4013      	ands	r3, r2
 8000a18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f47f ae8e 	bne.w	800074c <HAL_GPIO_Init+0x14>
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	372c      	adds	r7, #44	; 0x2c
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40010400 	.word	0x40010400

08000a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a50:	787b      	ldrb	r3, [r7, #1]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a56:	887a      	ldrh	r2, [r7, #2]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a5c:	e003      	b.n	8000a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	041a      	lsls	r2, r3, #16
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	611a      	str	r2, [r3, #16]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	b08b      	sub	sp, #44	; 0x2c
 8000a74:	af06      	add	r7, sp, #24
 8000a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e0fd      	b.n	8000c7e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d106      	bne.n	8000a9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f006 fc9e 	bl	80073d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 f969 	bl	8002d80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	687e      	ldr	r6, [r7, #4]
 8000ab6:	466d      	mov	r5, sp
 8000ab8:	f106 0410 	add.w	r4, r6, #16
 8000abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	602b      	str	r3, [r5, #0]
 8000ac4:	1d33      	adds	r3, r6, #4
 8000ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ac8:	6838      	ldr	r0, [r7, #0]
 8000aca:	f002 f933 	bl	8002d34 <USB_CoreInit>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d005      	beq.n	8000ae0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e0ce      	b.n	8000c7e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f964 	bl	8002db4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e04c      	b.n	8000b8c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3301      	adds	r3, #1
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	440b      	add	r3, r1
 8000b18:	7bfa      	ldrb	r2, [r7, #15]
 8000b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	b298      	uxth	r0, r3
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	440b      	add	r3, r1
 8000b2e:	3336      	adds	r3, #54	; 0x36
 8000b30:	4602      	mov	r2, r0
 8000b32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	440b      	add	r3, r1
 8000b44:	3303      	adds	r3, #3
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b4a:	7bfa      	ldrb	r2, [r7, #15]
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	440b      	add	r3, r1
 8000b58:	3338      	adds	r3, #56	; 0x38
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	440b      	add	r3, r1
 8000b6c:	333c      	adds	r3, #60	; 0x3c
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	440b      	add	r3, r1
 8000b80:	3340      	adds	r3, #64	; 0x40
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3ad      	bcc.n	8000af2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e044      	b.n	8000c26 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b9c:	7bfa      	ldrb	r2, [r7, #15]
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	440b      	add	r3, r1
 8000baa:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000bc4:	7bfa      	ldrb	r2, [r7, #15]
 8000bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bc8:	7bfa      	ldrb	r2, [r7, #15]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	440b      	add	r3, r1
 8000bd6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	440b      	add	r3, r1
 8000c02:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3301      	adds	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfa      	ldrb	r2, [r7, #15]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3b5      	bcc.n	8000b9c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	687e      	ldr	r6, [r7, #4]
 8000c38:	466d      	mov	r5, sp
 8000c3a:	f106 0410 	add.w	r4, r6, #16
 8000c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	602b      	str	r3, [r5, #0]
 8000c46:	1d33      	adds	r3, r6, #4
 8000c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f002 f8be 	bl	8002dcc <USB_DevInit>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2202      	movs	r2, #2
 8000c5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00d      	b.n	8000c7e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 fd70 	bl	800575c <USB_DevDisconnect>

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d101      	bne.n	8000c9c <HAL_PCD_Start+0x16>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e016      	b.n	8000cca <HAL_PCD_Start+0x44>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f853 	bl	8002d54 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f006 fe04 	bl	80078be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 fd44 	bl	8005748 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b088      	sub	sp, #32
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fd46 	bl	8005770 <USB_ReadInterrupts>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cee:	d102      	bne.n	8000cf6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fb5f 	bl	80013b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 fd38 	bl	8005770 <USB_ReadInterrupts>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0a:	d112      	bne.n	8000d32 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f006 fbd2 	bl	80074ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f923 	bl	8000f78 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fd1a 	bl	8005770 <USB_ReadInterrupts>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d46:	d10b      	bne.n	8000d60 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d5a:	b292      	uxth	r2, r2
 8000d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fd03 	bl	8005770 <USB_ReadInterrupts>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d74:	d10b      	bne.n	8000d8e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d88:	b292      	uxth	r2, r2
 8000d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 fcec 	bl	8005770 <USB_ReadInterrupts>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000da2:	d126      	bne.n	8000df2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0204 	bic.w	r2, r2, #4
 8000db6:	b292      	uxth	r2, r2
 8000db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0208 	bic.w	r2, r2, #8
 8000dce:	b292      	uxth	r2, r2
 8000dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f006 fbb3 	bl	8007540 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dec:	b292      	uxth	r2, r2
 8000dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 fcba 	bl	8005770 <USB_ReadInterrupts>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e06:	f040 8082 	bne.w	8000f0e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	77fb      	strb	r3, [r7, #31]
 8000e0e:	e010      	b.n	8000e32 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	7ffb      	ldrb	r3, [r7, #31]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	441a      	add	r2, r3
 8000e1c:	7ffb      	ldrb	r3, [r7, #31]
 8000e1e:	8812      	ldrh	r2, [r2, #0]
 8000e20:	b292      	uxth	r2, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	3320      	adds	r3, #32
 8000e26:	443b      	add	r3, r7
 8000e28:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	77fb      	strb	r3, [r7, #31]
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	2b07      	cmp	r3, #7
 8000e36:	d9eb      	bls.n	8000e10 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	b292      	uxth	r2, r2
 8000e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	b292      	uxth	r2, r2
 8000e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000e68:	bf00      	nop
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f6      	beq.n	8000e6a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	77fb      	strb	r3, [r7, #31]
 8000e98:	e00f      	b.n	8000eba <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000e9a:	7ffb      	ldrb	r3, [r7, #31]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	7ffa      	ldrb	r2, [r7, #31]
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	440a      	add	r2, r1
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	3320      	adds	r3, #32
 8000eac:	443b      	add	r3, r7
 8000eae:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000eb2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000eb4:	7ffb      	ldrb	r3, [r7, #31]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	77fb      	strb	r3, [r7, #31]
 8000eba:	7ffb      	ldrb	r3, [r7, #31]
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d9ec      	bls.n	8000e9a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0208 	orr.w	r2, r2, #8
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eea:	b292      	uxth	r2, r2
 8000eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0204 	orr.w	r2, r2, #4
 8000f02:	b292      	uxth	r2, r2
 8000f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f006 faff 	bl	800750c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 fc2c 	bl	8005770 <USB_ReadInterrupts>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f22:	d10e      	bne.n	8000f42 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f36:	b292      	uxth	r2, r2
 8000f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f006 fab8 	bl	80074b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 fc12 	bl	8005770 <USB_ReadInterrupts>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f56:	d10b      	bne.n	8000f70 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_PCD_SetAddress+0x1a>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e013      	b.n	8000fba <HAL_PCD_SetAddress+0x42>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fbb9 	bl	8005722 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4611      	mov	r1, r2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	70fb      	strb	r3, [r7, #3]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	803b      	strh	r3, [r7, #0]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da0e      	bge.n	8001006 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	705a      	strb	r2, [r3, #1]
 8001004:	e00e      	b.n	8001024 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f003 0207 	and.w	r2, r3, #7
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	b2da      	uxtb	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001030:	883a      	ldrh	r2, [r7, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	78ba      	ldrb	r2, [r7, #2]
 800103a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b29a      	uxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800104e:	78bb      	ldrb	r3, [r7, #2]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d102      	bne.n	800105a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_PCD_EP_Open+0xa6>
 8001064:	2302      	movs	r3, #2
 8001066:	e00e      	b.n	8001086 <HAL_PCD_EP_Open+0xc4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fec8 	bl	8002e0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001084:	7afb      	ldrb	r3, [r7, #11]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800109a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da0e      	bge.n	80010c0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2201      	movs	r2, #1
 80010bc:	705a      	strb	r2, [r3, #1]
 80010be:	e00e      	b.n	80010de <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f003 0207 	and.w	r2, r3, #7
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_PCD_EP_Close+0x6a>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e00e      	b.n	8001116 <HAL_PCD_EP_Close+0x88>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68f9      	ldr	r1, [r7, #12]
 8001106:	4618      	mov	r0, r3
 8001108:	f002 f9ea 	bl	80034e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	460b      	mov	r3, r1
 800112c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	f003 0207 	and.w	r2, r3, #7
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2200      	movs	r2, #0
 800115c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	b2da      	uxtb	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	2b00      	cmp	r3, #0
 8001172:	d106      	bne.n	8001182 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6979      	ldr	r1, [r7, #20]
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fb9c 	bl	80038b8 <USB_EPStartXfer>
 8001180:	e005      	b.n	800118e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6979      	ldr	r1, [r7, #20]
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fb95 	bl	80038b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	f003 0207 	and.w	r2, r3, #7
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	460b      	mov	r3, r1
 80011d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2201      	movs	r2, #1
 8001210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	b2da      	uxtb	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6979      	ldr	r1, [r7, #20]
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fb42 	bl	80038b8 <USB_EPStartXfer>
 8001234:	e005      	b.n	8001242 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6979      	ldr	r1, [r7, #20]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fb3b 	bl	80038b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	f003 0207 	and.w	r2, r3, #7
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	d901      	bls.n	800126a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e04c      	b.n	8001304 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800126a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da0e      	bge.n	8001290 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	705a      	strb	r2, [r3, #1]
 800128e:	e00c      	b.n	80012aa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2201      	movs	r2, #1
 80012ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_PCD_EP_SetStall+0x7e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e01c      	b.n	8001304 <HAL_PCD_EP_SetStall+0xb8>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 f925 	bl	8005528 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d108      	bne.n	80012fa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4610      	mov	r0, r2
 80012f6:	f004 fa4a 	bl	800578e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 020f 	and.w	r2, r3, #15
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d901      	bls.n	800132a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e040      	b.n	80013ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800132a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800132e:	2b00      	cmp	r3, #0
 8001330:	da0e      	bge.n	8001350 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	705a      	strb	r2, [r3, #1]
 800134e:	e00e      	b.n	800136e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	f003 0207 	and.w	r2, r3, #7
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	b2da      	uxtb	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_PCD_EP_ClrStall+0x82>
 800138a:	2302      	movs	r3, #2
 800138c:	e00e      	b.n	80013ac <HAL_PCD_EP_ClrStall+0xa0>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	4618      	mov	r0, r3
 800139e:	f004 f913 	bl	80055c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013bc:	e2ec      	b.n	8001998 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80013d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 8161 	bne.w	80016a0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d152      	bne.n	800148e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80013f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013f8:	81fb      	strh	r3, [r7, #14]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001408:	b29b      	uxth	r3, r3
 800140a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3328      	adds	r3, #40	; 0x28
 8001410:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	3302      	adds	r3, #2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	4413      	add	r3, r2
 8001430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	441a      	add	r2, r3
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800144c:	2100      	movs	r1, #0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f006 f815 	bl	800747e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 829b 	beq.w	8001998 <PCD_EP_ISR_Handler+0x5e4>
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 8296 	bne.w	8001998 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b292      	uxth	r2, r2
 8001480:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800148c:	e284      	b.n	8001998 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800149e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d034      	beq.n	8001512 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	3306      	adds	r3, #6
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	f004 f9a1 	bl	800582e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014f8:	4013      	ands	r3, r2
 80014fa:	823b      	strh	r3, [r7, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	8a3a      	ldrh	r2, [r7, #16]
 8001502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001506:	b292      	uxth	r2, r2
 8001508:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f005 ff8a 	bl	8007424 <HAL_PCD_SetupStageCallback>
 8001510:	e242      	b.n	8001998 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001512:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001516:	2b00      	cmp	r3, #0
 8001518:	f280 823e 	bge.w	8001998 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	b29a      	uxth	r2, r3
 8001524:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001528:	4013      	ands	r3, r2
 800152a:	83bb      	strh	r3, [r7, #28]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	8bba      	ldrh	r2, [r7, #28]
 8001532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001536:	b292      	uxth	r2, r2
 8001538:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	3306      	adds	r3, #6
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	4413      	add	r3, r2
 8001558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d019      	beq.n	80015a2 <PCD_EP_ISR_Handler+0x1ee>
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	6959      	ldr	r1, [r3, #20]
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001586:	b29b      	uxth	r3, r3
 8001588:	f004 f951 	bl	800582e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	441a      	add	r2, r3
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800159a:	2100      	movs	r1, #0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f005 ff53 	bl	8007448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 81f2 	bne.w	8001998 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4413      	add	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d112      	bne.n	8001602 <PCD_EP_ISR_Handler+0x24e>
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	801a      	strh	r2, [r3, #0]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	801a      	strh	r2, [r3, #0]
 8001600:	e02f      	b.n	8001662 <PCD_EP_ISR_Handler+0x2ae>
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2b3e      	cmp	r3, #62	; 0x3e
 8001608:	d813      	bhi.n	8001632 <PCD_EP_ISR_Handler+0x27e>
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <PCD_EP_ISR_Handler+0x270>
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	3301      	adds	r3, #1
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001626:	b29b      	uxth	r3, r3
 8001628:	029b      	lsls	r3, r3, #10
 800162a:	b29a      	uxth	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	801a      	strh	r2, [r3, #0]
 8001630:	e017      	b.n	8001662 <PCD_EP_ISR_Handler+0x2ae>
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <PCD_EP_ISR_Handler+0x298>
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001648:	3b01      	subs	r3, #1
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	b29b      	uxth	r3, r3
 8001650:	029b      	lsls	r3, r3, #10
 8001652:	b29b      	uxth	r3, r3
 8001654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800165c:	b29a      	uxth	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800166e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001672:	827b      	strh	r3, [r7, #18]
 8001674:	8a7b      	ldrh	r3, [r7, #18]
 8001676:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800167a:	827b      	strh	r3, [r7, #18]
 800167c:	8a7b      	ldrh	r3, [r7, #18]
 800167e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001682:	827b      	strh	r3, [r7, #18]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	8a7b      	ldrh	r3, [r7, #18]
 800168a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800168e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169a:	b29b      	uxth	r3, r3
 800169c:	8013      	strh	r3, [r2, #0]
 800169e:	e17b      	b.n	8001998 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f280 80ea 	bge.w	8001890 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016d2:	4013      	ands	r3, r2
 80016d4:	853b      	strh	r3, [r7, #40]	; 0x28
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ea:	b292      	uxth	r2, r2
 80016ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	7b1b      	ldrb	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d122      	bne.n	8001752 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001714:	b29b      	uxth	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	3306      	adds	r3, #6
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001734:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001736:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8087 	beq.w	800184c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	6959      	ldr	r1, [r3, #20]
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	88da      	ldrh	r2, [r3, #6]
 800174a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800174c:	f004 f86f 	bl	800582e <USB_ReadPMA>
 8001750:	e07c      	b.n	800184c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d108      	bne.n	800176c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800175a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800175c:	461a      	mov	r2, r3
 800175e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f927 	bl	80019b4 <HAL_PCD_EP_DB_Receive>
 8001766:	4603      	mov	r3, r0
 8001768:	86fb      	strh	r3, [r7, #54]	; 0x36
 800176a:	e06f      	b.n	800184c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001786:	847b      	strh	r3, [r7, #34]	; 0x22
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	441a      	add	r2, r3
 8001796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800179c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d021      	beq.n	800180a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	3302      	adds	r3, #2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80017f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d02a      	beq.n	800184c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	6959      	ldr	r1, [r3, #20]
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	891a      	ldrh	r2, [r3, #8]
 8001802:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001804:	f004 f813 	bl	800582e <USB_ReadPMA>
 8001808:	e020      	b.n	800184c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	3306      	adds	r3, #6
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001832:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	6959      	ldr	r1, [r3, #20]
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	895a      	ldrh	r2, [r3, #10]
 8001846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001848:	f003 fff1 	bl	800582e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001852:	441a      	add	r2, r3
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800185e:	441a      	add	r2, r3
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <PCD_EP_ISR_Handler+0x4c2>
 800186c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	429a      	cmp	r2, r3
 8001874:	d206      	bcs.n	8001884 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f005 fde3 	bl	8007448 <HAL_PCD_DataOutStageCallback>
 8001882:	e005      	b.n	8001890 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800188a:	4618      	mov	r0, r3
 800188c:	f002 f814 	bl	80038b8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001890:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b00      	cmp	r3, #0
 8001898:	d07e      	beq.n	8001998 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800189a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c8:	843b      	strh	r3, [r7, #32]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	441a      	add	r2, r3
 80018d8:	8c3b      	ldrh	r3, [r7, #32]
 80018da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	78db      	ldrb	r3, [r3, #3]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d00c      	beq.n	8001908 <PCD_EP_ISR_Handler+0x554>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	78db      	ldrb	r3, [r3, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d146      	bne.n	800198c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80018fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d141      	bne.n	800198c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	3302      	adds	r3, #2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001930:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	699a      	ldr	r2, [r3, #24]
 8001936:	8bfb      	ldrh	r3, [r7, #30]
 8001938:	429a      	cmp	r2, r3
 800193a:	d906      	bls.n	800194a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	8bfb      	ldrh	r3, [r7, #30]
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	e002      	b.n	8001950 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d106      	bne.n	8001966 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f005 fd8d 	bl	800747e <HAL_PCD_DataInStageCallback>
 8001964:	e018      	b.n	8001998 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	695a      	ldr	r2, [r3, #20]
 800196a:	8bfb      	ldrh	r3, [r7, #30]
 800196c:	441a      	add	r2, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	8bfb      	ldrh	r3, [r7, #30]
 8001978:	441a      	add	r2, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001984:	4618      	mov	r0, r3
 8001986:	f001 ff97 	bl	80038b8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800198a:	e005      	b.n	8001998 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800198c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800198e:	461a      	mov	r2, r3
 8001990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f91b 	bl	8001bce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f6ff ad0a 	blt.w	80013be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3738      	adds	r7, #56	; 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d07e      	beq.n	8001aca <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	3302      	adds	r3, #2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	8b7b      	ldrh	r3, [r7, #26]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d306      	bcc.n	8001a0e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	8b7b      	ldrh	r3, [r7, #26]
 8001a06:	1ad2      	subs	r2, r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	619a      	str	r2, [r3, #24]
 8001a0c:	e002      	b.n	8001a14 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d123      	bne.n	8001a64 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a36:	833b      	strh	r3, [r7, #24]
 8001a38:	8b3b      	ldrh	r3, [r7, #24]
 8001a3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a3e:	833b      	strh	r3, [r7, #24]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	441a      	add	r2, r3
 8001a4e:	8b3b      	ldrh	r3, [r7, #24]
 8001a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d01f      	beq.n	8001aae <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a88:	82fb      	strh	r3, [r7, #22]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	441a      	add	r2, r3
 8001a98:	8afb      	ldrh	r3, [r7, #22]
 8001a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001aae:	8b7b      	ldrh	r3, [r7, #26]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8087 	beq.w	8001bc4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	6959      	ldr	r1, [r3, #20]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	891a      	ldrh	r2, [r3, #8]
 8001ac2:	8b7b      	ldrh	r3, [r7, #26]
 8001ac4:	f003 feb3 	bl	800582e <USB_ReadPMA>
 8001ac8:	e07c      	b.n	8001bc4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	3306      	adds	r3, #6
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	8b7b      	ldrh	r3, [r7, #26]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d306      	bcc.n	8001b0c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	8b7b      	ldrh	r3, [r7, #26]
 8001b04:	1ad2      	subs	r2, r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	619a      	str	r2, [r3, #24]
 8001b0a:	e002      	b.n	8001b12 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d123      	bne.n	8001b62 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b34:	83fb      	strh	r3, [r7, #30]
 8001b36:	8bfb      	ldrh	r3, [r7, #30]
 8001b38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b3c:	83fb      	strh	r3, [r7, #30]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	441a      	add	r2, r3
 8001b4c:	8bfb      	ldrh	r3, [r7, #30]
 8001b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d11f      	bne.n	8001bac <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b86:	83bb      	strh	r3, [r7, #28]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	441a      	add	r2, r3
 8001b96:	8bbb      	ldrh	r3, [r7, #28]
 8001b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001bac:	8b7b      	ldrh	r3, [r7, #26]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	6959      	ldr	r1, [r3, #20]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	895a      	ldrh	r2, [r3, #10]
 8001bbe:	8b7b      	ldrh	r3, [r7, #26]
 8001bc0:	f003 fe35 	bl	800582e <USB_ReadPMA>
    }
  }

  return count;
 8001bc4:	8b7b      	ldrh	r3, [r7, #26]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b0a2      	sub	sp, #136	; 0x88
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 81c7 	beq.w	8001f76 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d907      	bls.n	8001c30 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c28:	1ad2      	subs	r2, r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	619a      	str	r2, [r3, #24]
 8001c2e:	e002      	b.n	8001c36 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 80b9 	bne.w	8001db2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d126      	bne.n	8001c96 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	4413      	add	r3, r2
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	011a      	lsls	r2, r3, #4
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	4413      	add	r3, r2
 8001c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	801a      	strh	r2, [r3, #0]
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	801a      	strh	r2, [r3, #0]
 8001c94:	e01a      	b.n	8001ccc <HAL_PCD_EP_DB_Transmit+0xfe>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d116      	bne.n	8001ccc <HAL_PCD_EP_DB_Transmit+0xfe>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	4413      	add	r3, r2
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	011a      	lsls	r2, r3, #4
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	623b      	str	r3, [r7, #32]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d126      	bne.n	8001d28 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	4413      	add	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	011a      	lsls	r2, r3, #4
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	e017      	b.n	8001d58 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d113      	bne.n	8001d58 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	4413      	add	r3, r2
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	011a      	lsls	r2, r3, #4
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f005 fb8d 	bl	800747e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 82d4 	beq.w	8002318 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8a:	827b      	strh	r3, [r7, #18]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	8a7b      	ldrh	r3, [r7, #18]
 8001d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	8013      	strh	r3, [r2, #0]
 8001db0:	e2b2      	b.n	8002318 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d021      	beq.n	8001e00 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	441a      	add	r2, r3
 8001de8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f040 8286 	bne.w	8002318 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e14:	441a      	add	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e22:	441a      	add	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d309      	bcc.n	8001e48 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	621a      	str	r2, [r3, #32]
 8001e46:	e015      	b.n	8001e74 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001e50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e5e:	e009      	b.n	8001e74 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d155      	bne.n	8001f28 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e90:	4413      	add	r3, r2
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	011a      	lsls	r2, r3, #4
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d112      	bne.n	8001ed0 <HAL_PCD_EP_DB_Transmit+0x302>
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	e047      	b.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x392>
 8001ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8001ed4:	d811      	bhi.n	8001efa <HAL_PCD_EP_DB_Transmit+0x32c>
 8001ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8001edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_PCD_EP_DB_Transmit+0x31e>
 8001ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee8:	3301      	adds	r3, #1
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	e032      	b.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x392>
 8001efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_PCD_EP_DB_Transmit+0x342>
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	029b      	lsls	r3, r3, #10
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	e01b      	b.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d117      	bne.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	643b      	str	r3, [r7, #64]	; 0x40
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f44:	4413      	add	r3, r2
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	011a      	lsls	r2, r3, #4
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f50:	4413      	add	r3, r2
 8001f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	6959      	ldr	r1, [r3, #20]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	891a      	ldrh	r2, [r3, #8]
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f003 fc18 	bl	80057a4 <USB_WritePMA>
 8001f74:	e1d0      	b.n	8002318 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d307      	bcc.n	8001fbe <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fb6:	1ad2      	subs	r2, r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	619a      	str	r2, [r3, #24]
 8001fbc:	e002      	b.n	8001fc4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 80c4 	bne.w	8002156 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d126      	bne.n	8002024 <HAL_PCD_EP_DB_Transmit+0x456>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fea:	4413      	add	r3, r2
 8001fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	011a      	lsls	r2, r3, #4
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002008:	b29a      	uxth	r2, r3
 800200a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201c:	b29a      	uxth	r2, r3
 800201e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	e01a      	b.n	800205a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d116      	bne.n	800205a <HAL_PCD_EP_DB_Transmit+0x48c>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	677b      	str	r3, [r7, #116]	; 0x74
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002040:	4413      	add	r3, r2
 8002042:	677b      	str	r3, [r7, #116]	; 0x74
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	011a      	lsls	r2, r3, #4
 800204a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204c:	4413      	add	r3, r2
 800204e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002052:	673b      	str	r3, [r7, #112]	; 0x70
 8002054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d12f      	bne.n	80020c8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002080:	4413      	add	r3, r2
 8002082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	011a      	lsls	r2, r3, #4
 800208c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002090:	4413      	add	r3, r2
 8002092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002096:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800209a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	e017      	b.n	80020f8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d113      	bne.n	80020f8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d8:	b29b      	uxth	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020de:	4413      	add	r3, r2
 80020e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	011a      	lsls	r2, r3, #4
 80020e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ea:	4413      	add	r3, r2
 80020ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f005 f9bd 	bl	800747e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8104 	bne.w	8002318 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	441a      	add	r2, r3
 800213c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	b29b      	uxth	r3, r3
 8002152:	8013      	strh	r3, [r2, #0]
 8002154:	e0e0      	b.n	8002318 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d121      	bne.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	441a      	add	r2, r3
 800218c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 80b4 	bne.w	8002318 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021b8:	441a      	add	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021c6:	441a      	add	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6a1a      	ldr	r2, [r3, #32]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d309      	bcc.n	80021ec <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6a1a      	ldr	r2, [r3, #32]
 80021e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e4:	1ad2      	subs	r2, r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	621a      	str	r2, [r3, #32]
 80021ea:	e015      	b.n	8002218 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80021f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002202:	e009      	b.n	8002218 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	667b      	str	r3, [r7, #100]	; 0x64
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d155      	bne.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x704>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223a:	4413      	add	r3, r2
 800223c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	011a      	lsls	r2, r3, #4
 8002244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002246:	4413      	add	r3, r2
 8002248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800224c:	65bb      	str	r3, [r7, #88]	; 0x58
 800224e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002250:	2b00      	cmp	r3, #0
 8002252:	d112      	bne.n	800227a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800225e:	b29a      	uxth	r2, r3
 8002260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002272:	b29a      	uxth	r2, r3
 8002274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e044      	b.n	8002304 <HAL_PCD_EP_DB_Transmit+0x736>
 800227a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800227c:	2b3e      	cmp	r3, #62	; 0x3e
 800227e:	d811      	bhi.n	80022a4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	657b      	str	r3, [r7, #84]	; 0x54
 8002286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002292:	3301      	adds	r3, #1
 8002294:	657b      	str	r3, [r7, #84]	; 0x54
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002298:	b29b      	uxth	r3, r3
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	b29a      	uxth	r2, r3
 800229e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a0:	801a      	strh	r2, [r3, #0]
 80022a2:	e02f      	b.n	8002304 <HAL_PCD_EP_DB_Transmit+0x736>
 80022a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	657b      	str	r3, [r7, #84]	; 0x54
 80022aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_EP_DB_Transmit+0x6ec>
 80022b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b6:	3b01      	subs	r3, #1
 80022b8:	657b      	str	r3, [r7, #84]	; 0x54
 80022ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022bc:	b29b      	uxth	r3, r3
 80022be:	029b      	lsls	r3, r3, #10
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ce:	801a      	strh	r2, [r3, #0]
 80022d0:	e018      	b.n	8002304 <HAL_PCD_EP_DB_Transmit+0x736>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d114      	bne.n	8002304 <HAL_PCD_EP_DB_Transmit+0x736>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022e8:	4413      	add	r3, r2
 80022ea:	667b      	str	r3, [r7, #100]	; 0x64
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	011a      	lsls	r2, r3, #4
 80022f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022f4:	4413      	add	r3, r2
 80022f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022fa:	663b      	str	r3, [r7, #96]	; 0x60
 80022fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fe:	b29a      	uxth	r2, r3
 8002300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002302:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6959      	ldr	r1, [r3, #20]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	895a      	ldrh	r2, [r3, #10]
 8002310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	f003 fa46 	bl	80057a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002332:	823b      	strh	r3, [r7, #16]
 8002334:	8a3b      	ldrh	r3, [r7, #16]
 8002336:	f083 0310 	eor.w	r3, r3, #16
 800233a:	823b      	strh	r3, [r7, #16]
 800233c:	8a3b      	ldrh	r3, [r7, #16]
 800233e:	f083 0320 	eor.w	r3, r3, #32
 8002342:	823b      	strh	r3, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	8a3b      	ldrh	r3, [r7, #16]
 8002354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3788      	adds	r7, #136	; 0x88
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002372:	b480      	push	{r7}
 8002374:	b087      	sub	sp, #28
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	817b      	strh	r3, [r7, #10]
 8002380:	4613      	mov	r3, r2
 8002382:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002384:	897b      	ldrh	r3, [r7, #10]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e009      	b.n	80023bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023a8:	897a      	ldrh	r2, [r7, #10]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	80da      	strh	r2, [r3, #6]
 80023d0:	e00b      	b.n	80023ea <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2201      	movs	r2, #1
 80023d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e272      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8087 	beq.w	8002526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002418:	4b92      	ldr	r3, [pc, #584]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b04      	cmp	r3, #4
 8002422:	d00c      	beq.n	800243e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002424:	4b8f      	ldr	r3, [pc, #572]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d112      	bne.n	8002456 <HAL_RCC_OscConfig+0x5e>
 8002430:	4b8c      	ldr	r3, [pc, #560]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d10b      	bne.n	8002456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243e:	4b89      	ldr	r3, [pc, #548]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d06c      	beq.n	8002524 <HAL_RCC_OscConfig+0x12c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d168      	bne.n	8002524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e24c      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x76>
 8002460:	4b80      	ldr	r3, [pc, #512]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a7f      	ldr	r2, [pc, #508]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e02e      	b.n	80024cc <HAL_RCC_OscConfig+0xd4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7a      	ldr	r2, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b78      	ldr	r3, [pc, #480]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a77      	ldr	r2, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xd4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0xbc>
 800249a:	4b72      	ldr	r3, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a71      	ldr	r2, [pc, #452]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6f      	ldr	r3, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6e      	ldr	r2, [pc, #440]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xd4>
 80024b4:	4b6b      	ldr	r3, [pc, #428]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6a      	ldr	r2, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a67      	ldr	r2, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fd fff4 	bl	80004c0 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fd fff0 	bl	80004c0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e200      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xe4>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fd ffe0 	bl	80004c0 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7fd ffdc 	bl	80004c0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1ec      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x10c>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002532:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x18c>
 800254a:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x176>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1c0      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4939      	ldr	r1, [pc, #228]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fd ff95 	bl	80004c0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fd ff91 	bl	80004c0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1a1      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4927      	ldr	r1, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fd ff74 	bl	80004c0 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7fd ff70 	bl	80004c0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e180      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d03a      	beq.n	800267c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d019      	beq.n	8002642 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_RCC_OscConfig+0x274>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7fd ff54 	bl	80004c0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7fd ff50 	bl	80004c0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e160      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCC_OscConfig+0x26c>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800263a:	2001      	movs	r0, #1
 800263c:	f000 faa6 	bl	8002b8c <RCC_Delay>
 8002640:	e01c      	b.n	800267c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_OscConfig+0x274>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7fd ff3a 	bl	80004c0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264e:	e00f      	b.n	8002670 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7fd ff36 	bl	80004c0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d908      	bls.n	8002670 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e146      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	42420000 	.word	0x42420000
 800266c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	4b92      	ldr	r3, [pc, #584]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e9      	bne.n	8002650 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a6 	beq.w	80027d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b8b      	ldr	r3, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10d      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4a87      	ldr	r2, [pc, #540]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	61d3      	str	r3, [r2, #28]
 80026a6:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b7f      	ldr	r3, [pc, #508]	; (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7e      	ldr	r2, [pc, #504]	; (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7fd fef7 	bl	80004c0 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7fd fef3 	bl	80004c0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	; 0x64
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e103      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x4c8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x312>
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4a6e      	ldr	r2, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	e02d      	b.n	8002766 <HAL_RCC_OscConfig+0x36e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x334>
 8002712:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a69      	ldr	r2, [pc, #420]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a66      	ldr	r2, [pc, #408]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6213      	str	r3, [r2, #32]
 800272a:	e01c      	b.n	8002766 <HAL_RCC_OscConfig+0x36e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d10c      	bne.n	800274e <HAL_RCC_OscConfig+0x356>
 8002734:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a60      	ldr	r2, [pc, #384]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a5d      	ldr	r2, [pc, #372]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	e00b      	b.n	8002766 <HAL_RCC_OscConfig+0x36e>
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6213      	str	r3, [r2, #32]
 800275a:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d015      	beq.n	800279a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7fd fea7 	bl	80004c0 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fd fea3 	bl	80004c0 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0b1      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ee      	beq.n	8002776 <HAL_RCC_OscConfig+0x37e>
 8002798:	e014      	b.n	80027c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fd fe91 	bl	80004c0 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fd fe8d 	bl	80004c0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e09b      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ee      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8087 	beq.w	80028ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d061      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d146      	bne.n	8002882 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fd fe61 	bl	80004c0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7fd fe5d 	bl	80004c0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e06d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4921      	ldr	r1, [pc, #132]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a19      	ldr	r1, [r3, #32]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	430b      	orrs	r3, r1
 800284e:	491b      	ldr	r1, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fd fe31 	bl	80004c0 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002862:	f7fd fe2d 	bl	80004c0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e03d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x46a>
 8002880:	e035      	b.n	80028ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fd fe1a 	bl	80004c0 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7fd fe16 	bl	80004c0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e026      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x498>
 80028ae:	e01e      	b.n	80028ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e019      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
 80028c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_OscConfig+0x500>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0d0      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d910      	bls.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4965      	ldr	r1, [pc, #404]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800297a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d040      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d115      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e073      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06b      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4936      	ldr	r1, [pc, #216]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ec:	f7fd fd68 	bl	80004c0 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fd fd64 	bl	80004c0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e053      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d210      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	4922      	ldr	r1, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1d0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fcc6 	bl	800043c <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08007a14 	.word	0x08007a14
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	20000008 	.word	0x20000008

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b490      	push	{r4, r7}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xac>)
 8002ad8:	1d3c      	adds	r4, r7, #4
 8002ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ae0:	f240 2301 	movw	r3, #513	; 0x201
 8002ae4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x46>
 8002b0e:	e02b      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b12:	623b      	str	r3, [r7, #32]
      break;
 8002b14:	e02b      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3328      	adds	r3, #40	; 0x28
 8002b20:	443b      	add	r3, r7
 8002b22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b26:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	0c5b      	lsrs	r3, r3, #17
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	3328      	adds	r3, #40	; 0x28
 8002b3e:	443b      	add	r3, r7
 8002b40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b4a:	fb03 f202 	mul.w	r2, r3, r2
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	e004      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	623b      	str	r3, [r7, #32]
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b6a:	623b      	str	r3, [r7, #32]
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3728      	adds	r7, #40	; 0x28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc90      	pop	{r4, r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	080079b4 	.word	0x080079b4
 8002b80:	40021000 	.word	0x40021000
 8002b84:	007a1200 	.word	0x007a1200
 8002b88:	003d0900 	.word	0x003d0900

08002b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <RCC_Delay+0x34>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <RCC_Delay+0x38>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a5b      	lsrs	r3, r3, #9
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba8:	bf00      	nop
  }
  while (Delay --);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	60fa      	str	r2, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f9      	bne.n	8002ba8 <RCC_Delay+0x1c>
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	20000004 	.word	0x20000004
 8002bc4:	10624dd3 	.word	0x10624dd3

08002bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d07d      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be8:	4b4f      	ldr	r3, [pc, #316]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10d      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4a4b      	ldr	r2, [pc, #300]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	61d3      	str	r3, [r2, #28]
 8002c00:	4b49      	ldr	r3, [pc, #292]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d118      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1c:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a42      	ldr	r2, [pc, #264]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c28:	f7fd fc4a 	bl	80004c0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	e008      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fd fc46 	bl	80004c0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e06d      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d02e      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d027      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7c:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c82:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d014      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fd fc15 	bl	80004c0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fd fc11 	bl	80004c0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e036      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ee      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4917      	ldr	r1, [pc, #92]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	490b      	ldr	r1, [pc, #44]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42420440 	.word	0x42420440

08002d34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d34:	b084      	sub	sp, #16
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	f107 0014 	add.w	r0, r7, #20
 8002d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	b004      	add	sp, #16
 8002d52:	4770      	bx	lr

08002d54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d88:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4013      	ands	r3, r2
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dcc:	b084      	sub	sp, #16
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	f107 0014 	add.w	r0, r7, #20
 8002dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	b004      	add	sp, #16
 8002e0a:	4770      	bx	lr

08002e0c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b09b      	sub	sp, #108	; 0x6c
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	78db      	ldrb	r3, [r3, #3]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d81f      	bhi.n	8002e7e <USB_ActivateEndpoint+0x72>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <USB_ActivateEndpoint+0x38>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e71 	.word	0x08002e71
 8002e4c:	08002e87 	.word	0x08002e87
 8002e50:	08002e63 	.word	0x08002e63
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002e54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e60:	e012      	b.n	8002e88 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e66:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002e6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e6e:	e00b      	b.n	8002e88 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e7c:	e004      	b.n	8002e88 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002e84:	e000      	b.n	8002e88 <USB_ActivateEndpoint+0x7c>
      break;
 8002e86:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	7b1b      	ldrb	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 8149 	bne.w	800318c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	785b      	ldrb	r3, [r3, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8084 	beq.w	800300c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	4413      	add	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	011a      	lsls	r2, r3, #4
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	88db      	ldrh	r3, [r3, #6]
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	81fb      	strh	r3, [r7, #14]
 8002f46:	89fb      	ldrh	r3, [r7, #14]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01b      	beq.n	8002f88 <USB_ActivateEndpoint+0x17c>
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	81bb      	strh	r3, [r7, #12]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	441a      	add	r2, r3
 8002f72:	89bb      	ldrh	r3, [r7, #12]
 8002f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	78db      	ldrb	r3, [r3, #3]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d020      	beq.n	8002fd2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	813b      	strh	r3, [r7, #8]
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	f083 0320 	eor.w	r3, r3, #32
 8002fae:	813b      	strh	r3, [r7, #8]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	441a      	add	r2, r3
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8013      	strh	r3, [r2, #0]
 8002fd0:	e27f      	b.n	80034d2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe8:	817b      	strh	r3, [r7, #10]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	441a      	add	r2, r3
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003006:	b29b      	uxth	r3, r3
 8003008:	8013      	strh	r3, [r2, #0]
 800300a:	e262      	b.n	80034d2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	4413      	add	r3, r2
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	011a      	lsls	r2, r3, #4
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	4413      	add	r3, r2
 800302a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	88db      	ldrh	r3, [r3, #6]
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	b29b      	uxth	r3, r3
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	4413      	add	r3, r2
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	011a      	lsls	r2, r3, #4
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	4413      	add	r3, r2
 800305e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d112      	bne.n	8003092 <USB_ActivateEndpoint+0x286>
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003076:	b29a      	uxth	r2, r3
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308a:	b29a      	uxth	r2, r3
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	e02f      	b.n	80030f2 <USB_ActivateEndpoint+0x2e6>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b3e      	cmp	r3, #62	; 0x3e
 8003098:	d813      	bhi.n	80030c2 <USB_ActivateEndpoint+0x2b6>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	663b      	str	r3, [r7, #96]	; 0x60
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <USB_ActivateEndpoint+0x2a8>
 80030ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b0:	3301      	adds	r3, #1
 80030b2:	663b      	str	r3, [r7, #96]	; 0x60
 80030b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	029b      	lsls	r3, r3, #10
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	e017      	b.n	80030f2 <USB_ActivateEndpoint+0x2e6>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	663b      	str	r3, [r7, #96]	; 0x60
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <USB_ActivateEndpoint+0x2d0>
 80030d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d8:	3b01      	subs	r3, #1
 80030da:	663b      	str	r3, [r7, #96]	; 0x60
 80030dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030de:	b29b      	uxth	r3, r3
 80030e0:	029b      	lsls	r3, r3, #10
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	83fb      	strh	r3, [r7, #30]
 8003100:	8bfb      	ldrh	r3, [r7, #30]
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01b      	beq.n	8003142 <USB_ActivateEndpoint+0x336>
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003120:	83bb      	strh	r3, [r7, #28]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	8bbb      	ldrh	r3, [r7, #28]
 800312e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800313a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313e:	b29b      	uxth	r3, r3
 8003140:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003158:	837b      	strh	r3, [r7, #26]
 800315a:	8b7b      	ldrh	r3, [r7, #26]
 800315c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003160:	837b      	strh	r3, [r7, #26]
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003168:	837b      	strh	r3, [r7, #26]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	8b7b      	ldrh	r3, [r7, #26]
 8003176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003186:	b29b      	uxth	r3, r3
 8003188:	8013      	strh	r3, [r2, #0]
 800318a:	e1a2      	b.n	80034d2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	441a      	add	r2, r3
 80031b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80031b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80031c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d8:	4413      	add	r3, r2
 80031da:	65bb      	str	r3, [r7, #88]	; 0x58
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	011a      	lsls	r2, r3, #4
 80031e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	891b      	ldrh	r3, [r3, #8]
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fa:	801a      	strh	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800320c:	4413      	add	r3, r2
 800320e:	653b      	str	r3, [r7, #80]	; 0x50
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	011a      	lsls	r2, r3, #4
 8003216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003218:	4413      	add	r3, r2
 800321a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	895b      	ldrh	r3, [r3, #10]
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	b29b      	uxth	r3, r3
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 8091 	bne.w	800335c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003248:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800324a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01b      	beq.n	800328a <USB_ActivateEndpoint+0x47e>
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003268:	877b      	strh	r3, [r7, #58]	; 0x3a
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003286:	b29b      	uxth	r3, r3
 8003288:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	873b      	strh	r3, [r7, #56]	; 0x38
 8003298:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01b      	beq.n	80032da <USB_ActivateEndpoint+0x4ce>
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80032f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80032f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80032fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003300:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	441a      	add	r2, r3
 800330c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800330e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331e:	b29b      	uxth	r3, r3
 8003320:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003338:	867b      	strh	r3, [r7, #50]	; 0x32
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800334a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800334e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003356:	b29b      	uxth	r3, r3
 8003358:	8013      	strh	r3, [r2, #0]
 800335a:	e0ba      	b.n	80034d2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800336c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01d      	beq.n	80033b4 <USB_ActivateEndpoint+0x5a8>
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80033c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01d      	beq.n	800340c <USB_ActivateEndpoint+0x600>
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80033f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003404:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003408:	b29b      	uxth	r3, r3
 800340a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	78db      	ldrb	r3, [r3, #3]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d024      	beq.n	800345e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800342e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003432:	f083 0320 	eor.w	r3, r3, #32
 8003436:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	441a      	add	r2, r3
 8003444:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	b29b      	uxth	r3, r3
 800345a:	8013      	strh	r3, [r2, #0]
 800345c:	e01d      	b.n	800349a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003474:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003496:	b29b      	uxth	r3, r3
 8003498:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	441a      	add	r2, r3
 80034bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80034be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80034d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	376c      	adds	r7, #108	; 0x6c
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b08d      	sub	sp, #52	; 0x34
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	7b1b      	ldrb	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 808e 	bne.w	8003610 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d044      	beq.n	8003586 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	81bb      	strh	r3, [r7, #12]
 800350a:	89bb      	ldrh	r3, [r7, #12]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01b      	beq.n	800354c <USB_DeactivateEndpoint+0x6c>
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800353c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003548:	b29b      	uxth	r3, r3
 800354a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003562:	813b      	strh	r3, [r7, #8]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003580:	b29b      	uxth	r3, r3
 8003582:	8013      	strh	r3, [r2, #0]
 8003584:	e192      	b.n	80038ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	827b      	strh	r3, [r7, #18]
 8003594:	8a7b      	ldrh	r3, [r7, #18]
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01b      	beq.n	80035d6 <USB_DeactivateEndpoint+0xf6>
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	823b      	strh	r3, [r7, #16]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	441a      	add	r2, r3
 80035c0:	8a3b      	ldrh	r3, [r7, #16]
 80035c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ec:	81fb      	strh	r3, [r7, #14]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360a:	b29b      	uxth	r3, r3
 800360c:	8013      	strh	r3, [r2, #0]
 800360e:	e14d      	b.n	80038ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f040 80a5 	bne.w	8003764 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	843b      	strh	r3, [r7, #32]
 8003628:	8c3b      	ldrh	r3, [r7, #32]
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01b      	beq.n	800366a <USB_DeactivateEndpoint+0x18a>
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003648:	83fb      	strh	r3, [r7, #30]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	8bfb      	ldrh	r3, [r7, #30]
 8003656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003666:	b29b      	uxth	r3, r3
 8003668:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	83bb      	strh	r3, [r7, #28]
 8003678:	8bbb      	ldrh	r3, [r7, #28]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01b      	beq.n	80036ba <USB_DeactivateEndpoint+0x1da>
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003698:	837b      	strh	r3, [r7, #26]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	441a      	add	r2, r3
 80036a4:	8b7b      	ldrh	r3, [r7, #26]
 80036a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d0:	833b      	strh	r3, [r7, #24]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	441a      	add	r2, r3
 80036dc:	8b3b      	ldrh	r3, [r7, #24]
 80036de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	82fb      	strh	r3, [r7, #22]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	441a      	add	r2, r3
 8003714:	8afb      	ldrh	r3, [r7, #22]
 8003716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003726:	b29b      	uxth	r3, r3
 8003728:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003740:	82bb      	strh	r3, [r7, #20]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	8abb      	ldrh	r3, [r7, #20]
 800374e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375e:	b29b      	uxth	r3, r3
 8003760:	8013      	strh	r3, [r2, #0]
 8003762:	e0a3      	b.n	80038ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <USB_DeactivateEndpoint+0x2d4>
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <USB_DeactivateEndpoint+0x324>
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	441a      	add	r2, r3
 80037ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003800:	b29b      	uxth	r3, r3
 8003802:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	b29b      	uxth	r3, r3
 800383a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003852:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003870:	b29b      	uxth	r3, r3
 8003872:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	847b      	strh	r3, [r7, #34]	; 0x22
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3734      	adds	r7, #52	; 0x34
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0cc      	sub	sp, #304	; 0x130
 80038bc:	af00      	add	r7, sp, #0
 80038be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038c6:	6018      	str	r0, [r3, #0]
 80038c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	f041 817d 	bne.w	8004bde <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80038e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d908      	bls.n	8003912 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003910:	e007      	b.n	8003922 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	7b1b      	ldrb	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d152      	bne.n	80039d8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6959      	ldr	r1, [r3, #20]
 800393e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	88da      	ldrh	r2, [r3, #6]
 800394a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800394e:	b29b      	uxth	r3, r3
 8003950:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003954:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003958:	6800      	ldr	r0, [r0, #0]
 800395a:	f001 ff23 	bl	80057a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800395e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003962:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003966:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800396a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003980:	b29b      	uxth	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003988:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800398c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003990:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	440a      	add	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800399e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	011a      	lsls	r2, r3, #4
 80039a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80039b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	f001 b8b5 	b.w	8004b42 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80039d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	78db      	ldrb	r3, [r3, #3]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f040 84c6 	bne.w	8004376 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80039ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	f240 8443 	bls.w	800428e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a74:	1ad2      	subs	r2, r2, r3
 8003a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 823e 	beq.w	8003f26 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003ab6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 809a 	bne.w	8003c04 <USB_EPStartXfer+0x34c>
 8003ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ad8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003adc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	4619      	mov	r1, r3
 8003af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003afe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003b02:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	440a      	add	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	011a      	lsls	r2, r3, #4
 8003b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d122      	bne.n	8003b82 <USB_EPStartXfer+0x2ca>
 8003b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	801a      	strh	r2, [r3, #0]
 8003b80:	e079      	b.n	8003c76 <USB_EPStartXfer+0x3be>
 8003b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b86:	2b3e      	cmp	r3, #62	; 0x3e
 8003b88:	d81b      	bhi.n	8003bc2 <USB_EPStartXfer+0x30a>
 8003b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <USB_EPStartXfer+0x2f2>
 8003ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	801a      	strh	r2, [r3, #0]
 8003bc0:	e059      	b.n	8003c76 <USB_EPStartXfer+0x3be>
 8003bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <USB_EPStartXfer+0x32a>
 8003bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	029b      	lsls	r3, r3, #10
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	e038      	b.n	8003c76 <USB_EPStartXfer+0x3be>
 8003c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d130      	bne.n	8003c76 <USB_EPStartXfer+0x3be>
 8003c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003c32:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	440a      	add	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	011a      	lsls	r2, r3, #4
 8003c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c4e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	895b      	ldrh	r3, [r3, #10]
 8003c82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6959      	ldr	r1, [r3, #20]
 8003c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003c9c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003ca0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003ca4:	6800      	ldr	r0, [r0, #0]
 8003ca6:	f001 fd7d 	bl	80057a4 <USB_WritePMA>
            ep->xfer_buff += len;
 8003caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cba:	441a      	add	r2, r3
 8003cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d90f      	bls.n	8003d04 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8003ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cf4:	1ad2      	subs	r2, r2, r3
 8003cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e00e      	b.n	8003d22 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	785b      	ldrb	r3, [r3, #1]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 809a 	bne.w	8003e68 <USB_EPStartXfer+0x5b0>
 8003d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003d40:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003d66:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	011a      	lsls	r2, r3, #4
 8003d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d122      	bne.n	8003de6 <USB_EPStartXfer+0x52e>
 8003da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003da4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003db8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ddc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	801a      	strh	r2, [r3, #0]
 8003de4:	e083      	b.n	8003eee <USB_EPStartXfer+0x636>
 8003de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dea:	2b3e      	cmp	r3, #62	; 0x3e
 8003dec:	d81b      	bhi.n	8003e26 <USB_EPStartXfer+0x56e>
 8003dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <USB_EPStartXfer+0x556>
 8003e04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	029b      	lsls	r3, r3, #10
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e063      	b.n	8003eee <USB_EPStartXfer+0x636>
 8003e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <USB_EPStartXfer+0x58e>
 8003e3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e40:	3b01      	subs	r3, #1
 8003e42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e042      	b.n	8003eee <USB_EPStartXfer+0x636>
 8003e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d13a      	bne.n	8003eee <USB_EPStartXfer+0x636>
 8003e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003e84:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ea2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ea6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003eaa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	011a      	lsls	r2, r3, #4
 8003ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ec6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ed6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	891b      	ldrh	r3, [r3, #8]
 8003efa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6959      	ldr	r1, [r3, #20]
 8003f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003f14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003f18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003f1c:	6800      	ldr	r0, [r0, #0]
 8003f1e:	f001 fc41 	bl	80057a4 <USB_WritePMA>
 8003f22:	f000 be0e 	b.w	8004b42 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d16d      	bne.n	8004012 <USB_EPStartXfer+0x75a>
 8003f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	4413      	add	r3, r2
 8003f58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	011a      	lsls	r2, r3, #4
 8003f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f70:	647b      	str	r3, [r7, #68]	; 0x44
 8003f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d112      	bne.n	8003fa0 <USB_EPStartXfer+0x6e8>
 8003f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9c:	801a      	strh	r2, [r3, #0]
 8003f9e:	e063      	b.n	8004068 <USB_EPStartXfer+0x7b0>
 8003fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa6:	d817      	bhi.n	8003fd8 <USB_EPStartXfer+0x720>
 8003fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <USB_EPStartXfer+0x710>
 8003fbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd4:	801a      	strh	r2, [r3, #0]
 8003fd6:	e047      	b.n	8004068 <USB_EPStartXfer+0x7b0>
 8003fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <USB_EPStartXfer+0x740>
 8003fee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ff8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	029b      	lsls	r3, r3, #10
 8004000:	b29b      	uxth	r3, r3
 8004002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400a:	b29a      	uxth	r2, r3
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	e02a      	b.n	8004068 <USB_EPStartXfer+0x7b0>
 8004012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d122      	bne.n	8004068 <USB_EPStartXfer+0x7b0>
 8004022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	653b      	str	r3, [r7, #80]	; 0x50
 800402e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004032:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403c:	b29b      	uxth	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004042:	4413      	add	r3, r2
 8004044:	653b      	str	r3, [r7, #80]	; 0x50
 8004046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800404a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	011a      	lsls	r2, r3, #4
 8004054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004056:	4413      	add	r3, r2
 8004058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800405e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004062:	b29a      	uxth	r2, r3
 8004064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004066:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800406c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	891b      	ldrh	r3, [r3, #8]
 8004074:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800407c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6959      	ldr	r1, [r3, #20]
 8004084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004088:	b29b      	uxth	r3, r3
 800408a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800408e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004092:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004096:	6800      	ldr	r0, [r0, #0]
 8004098:	f001 fb84 	bl	80057a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800409c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ac:	441a      	add	r2, r3
 80040ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80040ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d90f      	bls.n	80040f6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80040d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	621a      	str	r2, [r3, #32]
 80040f4:	e00e      	b.n	8004114 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80040f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	643b      	str	r3, [r7, #64]	; 0x40
 8004120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d16d      	bne.n	800420c <USB_EPStartXfer+0x954>
 8004130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004134:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
 800413c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	4413      	add	r3, r2
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38
 8004154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	011a      	lsls	r2, r3, #4
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	4413      	add	r3, r2
 8004166:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
 800416c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d112      	bne.n	800419a <USB_EPStartXfer+0x8e2>
 8004174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800417e:	b29a      	uxth	r2, r3
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004192:	b29a      	uxth	r2, r3
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	e05d      	b.n	8004256 <USB_EPStartXfer+0x99e>
 800419a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800419e:	2b3e      	cmp	r3, #62	; 0x3e
 80041a0:	d817      	bhi.n	80041d2 <USB_EPStartXfer+0x91a>
 80041a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <USB_EPStartXfer+0x90a>
 80041b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041bc:	3301      	adds	r3, #1
 80041be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	029b      	lsls	r3, r3, #10
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	801a      	strh	r2, [r3, #0]
 80041d0:	e041      	b.n	8004256 <USB_EPStartXfer+0x99e>
 80041d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <USB_EPStartXfer+0x93a>
 80041e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041ec:	3b01      	subs	r3, #1
 80041ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	029b      	lsls	r3, r3, #10
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004204:	b29a      	uxth	r2, r3
 8004206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	e024      	b.n	8004256 <USB_EPStartXfer+0x99e>
 800420c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d11c      	bne.n	8004256 <USB_EPStartXfer+0x99e>
 800421c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422a:	b29b      	uxth	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	4413      	add	r3, r2
 8004232:	643b      	str	r3, [r7, #64]	; 0x40
 8004234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004244:	4413      	add	r3, r2
 8004246:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004250:	b29a      	uxth	r2, r3
 8004252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004254:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800425a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	895b      	ldrh	r3, [r3, #10]
 8004262:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6959      	ldr	r1, [r3, #20]
 8004272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004276:	b29b      	uxth	r3, r3
 8004278:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800427c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004280:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004284:	6800      	ldr	r0, [r0, #0]
 8004286:	f001 fa8d 	bl	80057a4 <USB_WritePMA>
 800428a:	f000 bc5a 	b.w	8004b42 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800428e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800429e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80042c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80042c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80042e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80042fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800430a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004314:	b29b      	uxth	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431a:	4413      	add	r3, r2
 800431c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	011a      	lsls	r2, r3, #4
 800432c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432e:	4413      	add	r3, r2
 8004330:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004334:	65bb      	str	r3, [r7, #88]	; 0x58
 8004336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800433a:	b29a      	uxth	r2, r3
 800433c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800433e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	891b      	ldrh	r3, [r3, #8]
 800434c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6959      	ldr	r1, [r3, #20]
 800435c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004360:	b29b      	uxth	r3, r3
 8004362:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004366:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800436a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800436e:	6800      	ldr	r0, [r0, #0]
 8004370:	f001 fa18 	bl	80057a4 <USB_WritePMA>
 8004374:	e3e5      	b.n	8004b42 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800437a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80043a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80043be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80043ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80043d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a1a      	ldr	r2, [r3, #32]
 80043de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80043f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 81bc 	beq.w	8004790 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800442a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	785b      	ldrb	r3, [r3, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d16d      	bne.n	8004512 <USB_EPStartXfer+0xc5a>
 8004436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	67bb      	str	r3, [r7, #120]	; 0x78
 8004442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004450:	b29b      	uxth	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004456:	4413      	add	r3, r2
 8004458:	67bb      	str	r3, [r7, #120]	; 0x78
 800445a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	011a      	lsls	r2, r3, #4
 8004468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800446a:	4413      	add	r3, r2
 800446c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004470:	677b      	str	r3, [r7, #116]	; 0x74
 8004472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d112      	bne.n	80044a0 <USB_EPStartXfer+0xbe8>
 800447a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004484:	b29a      	uxth	r2, r3
 8004486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004498:	b29a      	uxth	r2, r3
 800449a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	e060      	b.n	8004562 <USB_EPStartXfer+0xcaa>
 80044a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a4:	2b3e      	cmp	r3, #62	; 0x3e
 80044a6:	d817      	bhi.n	80044d8 <USB_EPStartXfer+0xc20>
 80044a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80044b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <USB_EPStartXfer+0xc10>
 80044be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044c2:	3301      	adds	r3, #1
 80044c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80044c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	029b      	lsls	r3, r3, #10
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	e044      	b.n	8004562 <USB_EPStartXfer+0xcaa>
 80044d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80044e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <USB_EPStartXfer+0xc40>
 80044ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044f2:	3b01      	subs	r3, #1
 80044f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80044f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	b29b      	uxth	r3, r3
 8004502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450a:	b29a      	uxth	r2, r3
 800450c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	e027      	b.n	8004562 <USB_EPStartXfer+0xcaa>
 8004512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d11f      	bne.n	8004562 <USB_EPStartXfer+0xcaa>
 8004522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004538:	4413      	add	r3, r2
 800453a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800453e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	011a      	lsls	r2, r3, #4
 800454c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004550:	4413      	add	r3, r2
 8004552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004556:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800455c:	b29a      	uxth	r2, r3
 800455e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004560:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	895b      	ldrh	r3, [r3, #10]
 800456e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6959      	ldr	r1, [r3, #20]
 800457e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004582:	b29b      	uxth	r3, r3
 8004584:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004588:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800458c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004590:	6800      	ldr	r0, [r0, #0]
 8004592:	f001 f907 	bl	80057a4 <USB_WritePMA>
          ep->xfer_buff += len;
 8004596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800459a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a6:	441a      	add	r2, r3
 80045a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80045b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d90f      	bls.n	80045f0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80045d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	621a      	str	r2, [r3, #32]
 80045ee:	e00e      	b.n	800460e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80045f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800460e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8295 	beq.w	8004b42 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800461c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d16d      	bne.n	8004704 <USB_EPStartXfer+0xe4c>
 8004628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800462c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	66bb      	str	r3, [r7, #104]	; 0x68
 8004634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004648:	4413      	add	r3, r2
 800464a:	66bb      	str	r3, [r7, #104]	; 0x68
 800464c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	011a      	lsls	r2, r3, #4
 800465a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800465c:	4413      	add	r3, r2
 800465e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004662:	667b      	str	r3, [r7, #100]	; 0x64
 8004664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d112      	bne.n	8004692 <USB_EPStartXfer+0xdda>
 800466c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004676:	b29a      	uxth	r2, r3
 8004678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800468a:	b29a      	uxth	r2, r3
 800468c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	e063      	b.n	800475a <USB_EPStartXfer+0xea2>
 8004692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004696:	2b3e      	cmp	r3, #62	; 0x3e
 8004698:	d817      	bhi.n	80046ca <USB_EPStartXfer+0xe12>
 800469a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <USB_EPStartXfer+0xe02>
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	3301      	adds	r3, #1
 80046b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	b29b      	uxth	r3, r3
 80046c0:	029b      	lsls	r3, r3, #10
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	e047      	b.n	800475a <USB_EPStartXfer+0xea2>
 80046ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <USB_EPStartXfer+0xe32>
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e4:	3b01      	subs	r3, #1
 80046e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	029b      	lsls	r3, r3, #10
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	e02a      	b.n	800475a <USB_EPStartXfer+0xea2>
 8004704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d122      	bne.n	800475a <USB_EPStartXfer+0xea2>
 8004714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	673b      	str	r3, [r7, #112]	; 0x70
 8004720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004734:	4413      	add	r3, r2
 8004736:	673b      	str	r3, [r7, #112]	; 0x70
 8004738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	011a      	lsls	r2, r3, #4
 8004746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004748:	4413      	add	r3, r2
 800474a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800474e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004754:	b29a      	uxth	r2, r3
 8004756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004758:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800475a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800475e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	891b      	ldrh	r3, [r3, #8]
 8004766:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800476a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6959      	ldr	r1, [r3, #20]
 8004776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477a:	b29b      	uxth	r3, r3
 800477c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004780:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004784:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004788:	6800      	ldr	r0, [r0, #0]
 800478a:	f001 f80b 	bl	80057a4 <USB_WritePMA>
 800478e:	e1d8      	b.n	8004b42 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d178      	bne.n	8004892 <USB_EPStartXfer+0xfda>
 80047a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047c4:	4413      	add	r3, r2
 80047c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	011a      	lsls	r2, r3, #4
 80047d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047dc:	4413      	add	r3, r2
 80047de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d116      	bne.n	800481c <USB_EPStartXfer+0xf64>
 80047ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004812:	b29a      	uxth	r2, r3
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e06b      	b.n	80048f4 <USB_EPStartXfer+0x103c>
 800481c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004820:	2b3e      	cmp	r3, #62	; 0x3e
 8004822:	d818      	bhi.n	8004856 <USB_EPStartXfer+0xf9e>
 8004824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800482e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <USB_EPStartXfer+0xf8c>
 800483a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800483e:	3301      	adds	r3, #1
 8004840:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004848:	b29b      	uxth	r3, r3
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	b29a      	uxth	r2, r3
 800484e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	e04e      	b.n	80048f4 <USB_EPStartXfer+0x103c>
 8004856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <USB_EPStartXfer+0xfbe>
 800486c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004870:	3b01      	subs	r3, #1
 8004872:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800487a:	b29b      	uxth	r3, r3
 800487c:	029b      	lsls	r3, r3, #10
 800487e:	b29b      	uxth	r3, r3
 8004880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004888:	b29a      	uxth	r2, r3
 800488a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	e030      	b.n	80048f4 <USB_EPStartXfer+0x103c>
 8004892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d128      	bne.n	80048f4 <USB_EPStartXfer+0x103c>
 80048a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80048b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048c6:	4413      	add	r3, r2
 80048c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80048cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	011a      	lsls	r2, r3, #4
 80048da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048de:	4413      	add	r3, r2
 80048e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80048f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	891b      	ldrh	r3, [r3, #8]
 8004900:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6959      	ldr	r1, [r3, #20]
 8004910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004914:	b29b      	uxth	r3, r3
 8004916:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800491a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800491e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004922:	6800      	ldr	r0, [r0, #0]
 8004924:	f000 ff3e 	bl	80057a4 <USB_WritePMA>
          ep->xfer_buff += len;
 8004928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800492c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004938:	441a      	add	r2, r3
 800493a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800493e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800494a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	429a      	cmp	r2, r3
 8004960:	d90f      	bls.n	8004982 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8004962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	621a      	str	r2, [r3, #32]
 8004980:	e00e      	b.n	80049a0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8004982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80049a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80cc 	beq.w	8004b42 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d178      	bne.n	8004aba <USB_EPStartXfer+0x1202>
 80049c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ec:	4413      	add	r3, r2
 80049ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	011a      	lsls	r2, r3, #4
 8004a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a04:	4413      	add	r3, r2
 8004a06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d116      	bne.n	8004a44 <USB_EPStartXfer+0x118c>
 8004a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a28:	801a      	strh	r2, [r3, #0]
 8004a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a40:	801a      	strh	r2, [r3, #0]
 8004a42:	e064      	b.n	8004b0e <USB_EPStartXfer+0x1256>
 8004a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a48:	2b3e      	cmp	r3, #62	; 0x3e
 8004a4a:	d818      	bhi.n	8004a7e <USB_EPStartXfer+0x11c6>
 8004a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d004      	beq.n	8004a6c <USB_EPStartXfer+0x11b4>
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	3301      	adds	r3, #1
 8004a68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	029b      	lsls	r3, r3, #10
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	e047      	b.n	8004b0e <USB_EPStartXfer+0x1256>
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <USB_EPStartXfer+0x11e6>
 8004a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	029b      	lsls	r3, r3, #10
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e029      	b.n	8004b0e <USB_EPStartXfer+0x1256>
 8004aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d121      	bne.n	8004b0e <USB_EPStartXfer+0x1256>
 8004aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	011a      	lsls	r2, r3, #4
 8004af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004af8:	4413      	add	r3, r2
 8004afa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	895b      	ldrh	r3, [r3, #10]
 8004b1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6959      	ldr	r1, [r3, #20]
 8004b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b34:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b38:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f000 fe31 	bl	80057a4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b64:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b70:	8013      	strh	r3, [r2, #0]
 8004b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b76:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004b7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b7e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004b82:	8812      	ldrh	r2, [r2, #0]
 8004b84:	f082 0210 	eor.w	r2, r2, #16
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004b92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b96:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004b9a:	8812      	ldrh	r2, [r2, #0]
 8004b9c:	f082 0220 	eor.w	r2, r2, #32
 8004ba0:	801a      	strh	r2, [r3, #0]
 8004ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]
 8004bda:	f000 bc9f 	b.w	800551c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	7b1b      	ldrb	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 80ae 	bne.w	8004d4c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699a      	ldr	r2, [r3, #24]
 8004bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d917      	bls.n	8004c3c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699a      	ldr	r2, [r3, #24]
 8004c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2c:	1ad2      	subs	r2, r2, r3
 8004c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	619a      	str	r2, [r3, #24]
 8004c3a:	e00e      	b.n	8004c5a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c7e:	4413      	add	r3, r2
 8004c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	011a      	lsls	r2, r3, #4
 8004c92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c96:	4413      	add	r3, r2
 8004c98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d116      	bne.n	8004cd6 <USB_EPStartXfer+0x141e>
 8004ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e3e8      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
 8004cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cda:	2b3e      	cmp	r3, #62	; 0x3e
 8004cdc:	d818      	bhi.n	8004d10 <USB_EPStartXfer+0x1458>
 8004cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <USB_EPStartXfer+0x1446>
 8004cf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004cfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e3cb      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
 8004d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <USB_EPStartXfer+0x1478>
 8004d26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	e3ad      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	78db      	ldrb	r3, [r3, #3]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	f040 8200 	bne.w	800515e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 8091 	bne.w	8004e92 <USB_EPStartXfer+0x15da>
 8004d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d94:	4413      	add	r3, r2
 8004d96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	011a      	lsls	r2, r3, #4
 8004da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dac:	4413      	add	r3, r2
 8004dae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <USB_EPStartXfer+0x153c>
 8004dc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	e083      	b.n	8004efc <USB_EPStartXfer+0x1644>
 8004df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b3e      	cmp	r3, #62	; 0x3e
 8004e02:	d820      	bhi.n	8004e46 <USB_EPStartXfer+0x158e>
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <USB_EPStartXfer+0x157c>
 8004e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	e05a      	b.n	8004efc <USB_EPStartXfer+0x1644>
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <USB_EPStartXfer+0x15be>
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e70:	3b01      	subs	r3, #1
 8004e72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e034      	b.n	8004efc <USB_EPStartXfer+0x1644>
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d12c      	bne.n	8004efc <USB_EPStartXfer+0x1644>
 8004ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	011a      	lsls	r2, r3, #4
 8004eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 8091 	bne.w	800503e <USB_EPStartXfer+0x1786>
 8004f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f40:	4413      	add	r3, r2
 8004f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	011a      	lsls	r2, r3, #4
 8004f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f58:	4413      	add	r3, r2
 8004f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d116      	bne.n	8004fa0 <USB_EPStartXfer+0x16e8>
 8004f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	e07c      	b.n	800509a <USB_EPStartXfer+0x17e2>
 8004fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b3e      	cmp	r3, #62	; 0x3e
 8004fae:	d820      	bhi.n	8004ff2 <USB_EPStartXfer+0x173a>
 8004fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <USB_EPStartXfer+0x1728>
 8004fd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fe0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	e053      	b.n	800509a <USB_EPStartXfer+0x17e2>
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <USB_EPStartXfer+0x176a>
 8005018:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800501c:	3b01      	subs	r3, #1
 800501e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005022:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005026:	b29b      	uxth	r3, r3
 8005028:	029b      	lsls	r3, r3, #10
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005034:	b29a      	uxth	r2, r3
 8005036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e02d      	b.n	800509a <USB_EPStartXfer+0x17e2>
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d125      	bne.n	800509a <USB_EPStartXfer+0x17e2>
 800504e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005064:	4413      	add	r3, r2
 8005066:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800506a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	011a      	lsls	r2, r3, #4
 8005078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800507c:	4413      	add	r3, r2
 800507e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005082:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	b29a      	uxth	r2, r3
 8005094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005098:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 81fe 	beq.w	80054a8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80050ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <USB_EPStartXfer+0x182c>
 80050d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10d      	bne.n	8005100 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 81db 	bne.w	80054a8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f040 81d4 	bne.w	80054a8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005104:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005158:	b29b      	uxth	r3, r3
 800515a:	8013      	strh	r3, [r2, #0]
 800515c:	e1a4      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800515e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	2b01      	cmp	r3, #1
 800516c:	f040 819a 	bne.w	80054a4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d917      	bls.n	80051bc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800518c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800519c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699a      	ldr	r2, [r3, #24]
 80051a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ac:	1ad2      	subs	r2, r2, r3
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	619a      	str	r2, [r3, #24]
 80051ba:	e00e      	b.n	80051da <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80051cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	785b      	ldrb	r3, [r3, #1]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d178      	bne.n	80052dc <USB_EPStartXfer+0x1a24>
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800520e:	4413      	add	r3, r2
 8005210:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	011a      	lsls	r2, r3, #4
 8005222:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005226:	4413      	add	r3, r2
 8005228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800522c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d116      	bne.n	8005266 <USB_EPStartXfer+0x19ae>
 8005238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005244:	b29a      	uxth	r2, r3
 8005246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525c:	b29a      	uxth	r2, r3
 800525e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e06b      	b.n	800533e <USB_EPStartXfer+0x1a86>
 8005266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526a:	2b3e      	cmp	r3, #62	; 0x3e
 800526c:	d818      	bhi.n	80052a0 <USB_EPStartXfer+0x19e8>
 800526e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <USB_EPStartXfer+0x19d6>
 8005284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005288:	3301      	adds	r3, #1
 800528a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005292:	b29b      	uxth	r3, r3
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	b29a      	uxth	r2, r3
 8005298:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	e04e      	b.n	800533e <USB_EPStartXfer+0x1a86>
 80052a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d104      	bne.n	80052c0 <USB_EPStartXfer+0x1a08>
 80052b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ba:	3b01      	subs	r3, #1
 80052bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	029b      	lsls	r3, r3, #10
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e030      	b.n	800533e <USB_EPStartXfer+0x1a86>
 80052dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d128      	bne.n	800533e <USB_EPStartXfer+0x1a86>
 80052ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005308:	b29b      	uxth	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	4413      	add	r3, r2
 8005312:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	011a      	lsls	r2, r3, #4
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	4413      	add	r3, r2
 800532a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800532e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005336:	b29a      	uxth	r2, r3
 8005338:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800534c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d178      	bne.n	800544e <USB_EPStartXfer+0x1b96>
 800535c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005378:	b29b      	uxth	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005380:	4413      	add	r3, r2
 8005382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	011a      	lsls	r2, r3, #4
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005398:	4413      	add	r3, r2
 800539a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800539e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <USB_EPStartXfer+0x1b20>
 80053aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e067      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
 80053d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053dc:	2b3e      	cmp	r3, #62	; 0x3e
 80053de:	d818      	bhi.n	8005412 <USB_EPStartXfer+0x1b5a>
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <USB_EPStartXfer+0x1b48>
 80053f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053fa:	3301      	adds	r3, #1
 80053fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005400:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005404:	b29b      	uxth	r3, r3
 8005406:	029b      	lsls	r3, r3, #10
 8005408:	b29a      	uxth	r2, r3
 800540a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	e04a      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800541c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <USB_EPStartXfer+0x1b7a>
 8005428:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800542c:	3b01      	subs	r3, #1
 800542e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005432:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005436:	b29b      	uxth	r3, r3
 8005438:	029b      	lsls	r3, r3, #10
 800543a:	b29b      	uxth	r3, r3
 800543c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005444:	b29a      	uxth	r2, r3
 8005446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e02c      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d124      	bne.n	80054a8 <USB_EPStartXfer+0x1bf0>
 800545e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005474:	4413      	add	r3, r2
 8005476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	011a      	lsls	r2, r3, #4
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548c:	4413      	add	r3, r2
 800548e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549a:	b29a      	uxth	r2, r3
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	e001      	b.n	80054a8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e03a      	b.n	800551e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80054d2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80054d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80054de:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80054e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	81bb      	strh	r3, [r7, #12]
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	f083 0310 	eor.w	r3, r3, #16
 8005558:	81bb      	strh	r3, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	89bb      	ldrh	r3, [r7, #12]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
 800557a:	e01f      	b.n	80055bc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	81fb      	strh	r3, [r7, #14]
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800559a:	81fb      	strh	r3, [r7, #14]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	89fb      	ldrh	r3, [r7, #14]
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	7b1b      	ldrb	r3, [r3, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 809d 	bne.w	8005716 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d04c      	beq.n	800567e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	823b      	strh	r3, [r7, #16]
 80055f2:	8a3b      	ldrh	r3, [r7, #16]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <USB_EPClearStall+0x6c>
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	81fb      	strh	r3, [r7, #14]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	78db      	ldrb	r3, [r3, #3]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d06c      	beq.n	8005716 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005652:	81bb      	strh	r3, [r7, #12]
 8005654:	89bb      	ldrh	r3, [r7, #12]
 8005656:	f083 0320 	eor.w	r3, r3, #32
 800565a:	81bb      	strh	r3, [r7, #12]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	89bb      	ldrh	r3, [r7, #12]
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]
 800567c:	e04b      	b.n	8005716 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	82fb      	strh	r3, [r7, #22]
 800568c:	8afb      	ldrh	r3, [r7, #22]
 800568e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01b      	beq.n	80056ce <USB_EPClearStall+0x106>
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	82bb      	strh	r3, [r7, #20]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8abb      	ldrh	r3, [r7, #20]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	827b      	strh	r3, [r7, #18]
 80056e6:	8a7b      	ldrh	r3, [r7, #18]
 80056e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056ec:	827b      	strh	r3, [r7, #18]
 80056ee:	8a7b      	ldrh	r3, [r7, #18]
 80056f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056f4:	827b      	strh	r3, [r7, #18]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8a7b      	ldrh	r3, [r7, #18]
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr

08005722 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800577e:	b29b      	uxth	r3, r3
 8005780:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b08d      	sub	sp, #52	; 0x34
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4611      	mov	r1, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	460b      	mov	r3, r1
 80057b4:	80fb      	strh	r3, [r7, #6]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80057ba:	88bb      	ldrh	r3, [r7, #4]
 80057bc:	3301      	adds	r3, #1
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	005a      	lsls	r2, r3, #1
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057dc:	e01e      	b.n	800581c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	3302      	adds	r3, #2
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	3302      	adds	r3, #2
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	3301      	adds	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	3b01      	subs	r3, #1
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1dd      	bne.n	80057de <USB_WritePMA+0x3a>
  }
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	3734      	adds	r7, #52	; 0x34
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800582e:	b480      	push	{r7}
 8005830:	b08b      	sub	sp, #44	; 0x2c
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	4611      	mov	r1, r2
 800583a:	461a      	mov	r2, r3
 800583c:	460b      	mov	r3, r1
 800583e:	80fb      	strh	r3, [r7, #6]
 8005840:	4613      	mov	r3, r2
 8005842:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005844:	88bb      	ldrh	r3, [r7, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	b29b      	uxth	r3, r3
 800584a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	005a      	lsls	r2, r3, #1
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005860:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
 8005866:	e01b      	b.n	80058a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	3302      	adds	r3, #2
 8005874:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3301      	adds	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	b2da      	uxtb	r2, r3
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	3302      	adds	r3, #2
 8005898:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	3b01      	subs	r3, #1
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e0      	bne.n	8005868 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80058a6:	88bb      	ldrh	r3, [r7, #4]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	701a      	strb	r2, [r3, #0]
  }
}
 80058c2:	bf00      	nop
 80058c4:	372c      	adds	r7, #44	; 0x2c
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	7c1b      	ldrb	r3, [r3, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d115      	bne.n	8005910 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058e8:	2202      	movs	r2, #2
 80058ea:	2181      	movs	r1, #129	; 0x81
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 feaa 	bl	8007646 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058fc:	2202      	movs	r2, #2
 80058fe:	2101      	movs	r1, #1
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fea0 	bl	8007646 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800590e:	e012      	b.n	8005936 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005910:	2340      	movs	r3, #64	; 0x40
 8005912:	2202      	movs	r2, #2
 8005914:	2181      	movs	r1, #129	; 0x81
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fe95 	bl	8007646 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	2202      	movs	r2, #2
 8005926:	2101      	movs	r1, #1
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 fe8c 	bl	8007646 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005936:	2308      	movs	r3, #8
 8005938:	2203      	movs	r2, #3
 800593a:	2182      	movs	r1, #130	; 0x82
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fe82 	bl	8007646 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005948:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800594c:	f001 ffa2 	bl	8007894 <USBD_static_malloc>
 8005950:	4602      	mov	r2, r0
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005962:	2301      	movs	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
 8005966:	e026      	b.n	80059b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2200      	movs	r2, #0
 800597e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	7c1b      	ldrb	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800599c:	2101      	movs	r1, #1
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 ff42 	bl	8007828 <USBD_LL_PrepareReceive>
 80059a4:	e007      	b.n	80059b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	2101      	movs	r1, #1
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 ff39 	bl	8007828 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80059d0:	2181      	movs	r1, #129	; 0x81
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 fe5d 	bl	8007692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80059de:	2101      	movs	r1, #1
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 fe56 	bl	8007692 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80059ee:	2182      	movs	r1, #130	; 0x82
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 fe4e 	bl	8007692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 ff48 	bl	80078ac <USBD_static_free>
    pdev->pClassData = NULL;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b086      	sub	sp, #24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d039      	beq.n	8005acc <USBD_CDC_Setup+0x9e>
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d17f      	bne.n	8005b5c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	88db      	ldrh	r3, [r3, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d029      	beq.n	8005ab8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da11      	bge.n	8005a92 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005a7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	88d2      	ldrh	r2, [r2, #6]
 8005a80:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a82:	6939      	ldr	r1, [r7, #16]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	88db      	ldrh	r3, [r3, #6]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fa09 	bl	8006ea2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005a90:	e06b      	b.n	8005b6a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	785a      	ldrb	r2, [r3, #1]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	88db      	ldrh	r3, [r3, #6]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005aa8:	6939      	ldr	r1, [r7, #16]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	88db      	ldrh	r3, [r3, #6]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 fa24 	bl	8006efe <USBD_CtlPrepareRx>
      break;
 8005ab6:	e058      	b.n	8005b6a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	7850      	ldrb	r0, [r2, #1]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	4798      	blx	r3
      break;
 8005aca:	e04e      	b.n	8005b6a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b0b      	cmp	r3, #11
 8005ad2:	d02e      	beq.n	8005b32 <USBD_CDC_Setup+0x104>
 8005ad4:	2b0b      	cmp	r3, #11
 8005ad6:	dc38      	bgt.n	8005b4a <USBD_CDC_Setup+0x11c>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <USBD_CDC_Setup+0xb4>
 8005adc:	2b0a      	cmp	r3, #10
 8005ade:	d014      	beq.n	8005b0a <USBD_CDC_Setup+0xdc>
 8005ae0:	e033      	b.n	8005b4a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d107      	bne.n	8005afc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005aec:	f107 030c 	add.w	r3, r7, #12
 8005af0:	2202      	movs	r2, #2
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 f9d4 	bl	8006ea2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005afa:	e02e      	b.n	8005b5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 f965 	bl	8006dce <USBD_CtlError>
            ret = USBD_FAIL;
 8005b04:	2302      	movs	r3, #2
 8005b06:	75fb      	strb	r3, [r7, #23]
          break;
 8005b08:	e027      	b.n	8005b5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d107      	bne.n	8005b24 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b14:	f107 030f 	add.w	r3, r7, #15
 8005b18:	2201      	movs	r2, #1
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 f9c0 	bl	8006ea2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b22:	e01a      	b.n	8005b5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 f951 	bl	8006dce <USBD_CtlError>
            ret = USBD_FAIL;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b30:	e013      	b.n	8005b5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d00d      	beq.n	8005b58 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 f945 	bl	8006dce <USBD_CtlError>
            ret = USBD_FAIL;
 8005b44:	2302      	movs	r3, #2
 8005b46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b48:	e006      	b.n	8005b58 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 f93e 	bl	8006dce <USBD_CtlError>
          ret = USBD_FAIL;
 8005b52:	2302      	movs	r3, #2
 8005b54:	75fb      	strb	r3, [r7, #23]
          break;
 8005b56:	e000      	b.n	8005b5a <USBD_CDC_Setup+0x12c>
          break;
 8005b58:	bf00      	nop
      }
      break;
 8005b5a:	e006      	b.n	8005b6a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 f935 	bl	8006dce <USBD_CtlError>
      ret = USBD_FAIL;
 8005b64:	2302      	movs	r3, #2
 8005b66:	75fb      	strb	r3, [r7, #23]
      break;
 8005b68:	bf00      	nop
  }

  return ret;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b86:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b8e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d03a      	beq.n	8005c10 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b9a:	78fa      	ldrb	r2, [r7, #3]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	331c      	adds	r3, #28
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d029      	beq.n	8005c04 <USBD_CDC_DataIn+0x90>
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	331c      	adds	r3, #28
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	78f9      	ldrb	r1, [r7, #3]
 8005bc4:	68b8      	ldr	r0, [r7, #8]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4403      	add	r3, r0
 8005bd0:	3338      	adds	r3, #56	; 0x38
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d110      	bne.n	8005c04 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	331c      	adds	r3, #28
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005bf6:	78f9      	ldrb	r1, [r7, #3]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 fdf0 	bl	80077e2 <USBD_LL_Transmit>
 8005c02:	e003      	b.n	8005c0c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 fe1b 	bl	800786e <USBD_LL_GetRxDataSize>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4798      	blx	r3

    return USBD_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e000      	b.n	8005c68 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005c66:	2302      	movs	r3, #2
  }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d015      	beq.n	8005cb6 <USBD_CDC_EP0_RxReady+0x46>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c90:	2bff      	cmp	r3, #255	; 0xff
 8005c92:	d010      	beq.n	8005cb6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005ca2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005caa:	b292      	uxth	r2, r2
 8005cac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2243      	movs	r2, #67	; 0x43
 8005ccc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005cce:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20000098 	.word	0x20000098

08005ce0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2243      	movs	r2, #67	; 0x43
 8005cec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000054 	.word	0x20000054

08005d00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2243      	movs	r2, #67	; 0x43
 8005d0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005d0e:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc80      	pop	{r7}
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	200000dc 	.word	0x200000dc

08005d20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000010 	.word	0x20000010

08005d40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d80:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d8a:	88fa      	ldrh	r2, [r7, #6]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01c      	beq.n	8005e18 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d115      	bne.n	8005e14 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2181      	movs	r1, #129	; 0x81
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fce9 	bl	80077e2 <USBD_LL_Transmit>

      return USBD_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	e002      	b.n	8005e1a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005e18:	2302      	movs	r3, #2
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d017      	beq.n	8005e6c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	7c1b      	ldrb	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e4e:	2101      	movs	r1, #1
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f001 fce9 	bl	8007828 <USBD_LL_PrepareReceive>
 8005e56:	e007      	b.n	8005e68 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	2101      	movs	r1, #1
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 fce0 	bl	8007828 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e000      	b.n	8005e6e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	4613      	mov	r3, r2
 8005e82:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e01a      	b.n	8005ec4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	79fa      	ldrb	r2, [r7, #7]
 8005eba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f001 fb4d 	bl	800755c <USBD_LL_Init>

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d006      	beq.n	8005eee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e001      	b.n	8005ef2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr

08005efe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 fb82 	bl	8007610 <USBD_LL_Start>

  return USBD_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr

08005f2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f36:	2302      	movs	r3, #2
 8005f38:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	4611      	mov	r1, r2
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3

  return USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fed8 	bl	8006d56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d016      	beq.n	8005ff8 <USBD_LL_SetupStage+0x6a>
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d81c      	bhi.n	8006008 <USBD_LL_SetupStage+0x7a>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <USBD_LL_SetupStage+0x4a>
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d008      	beq.n	8005fe8 <USBD_LL_SetupStage+0x5a>
 8005fd6:	e017      	b.n	8006008 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f9cb 	bl	800637c <USBD_StdDevReq>
      break;
 8005fe6:	e01a      	b.n	800601e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa2d 	bl	8006450 <USBD_StdItfReq>
      break;
 8005ff6:	e012      	b.n	800601e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fa6d 	bl	80064e0 <USBD_StdEPReq>
      break;
 8006006:	e00a      	b.n	800601e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800600e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 fb5a 	bl	80076d0 <USBD_LL_StallEP>
      break;
 800601c:	bf00      	nop
  }

  return USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	460b      	mov	r3, r1
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006036:	7afb      	ldrb	r3, [r7, #11]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d14b      	bne.n	80060d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006042:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800604a:	2b03      	cmp	r3, #3
 800604c:	d134      	bne.n	80060b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	429a      	cmp	r2, r3
 8006058:	d919      	bls.n	800608e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006070:	429a      	cmp	r2, r3
 8006072:	d203      	bcs.n	800607c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006078:	b29b      	uxth	r3, r3
 800607a:	e002      	b.n	8006082 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006080:	b29b      	uxth	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 ff57 	bl	8006f3a <USBD_CtlContinueRx>
 800608c:	e038      	b.n	8006100 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d105      	bne.n	80060b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 ff54 	bl	8006f5e <USBD_CtlSendStatus>
 80060b6:	e023      	b.n	8006100 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d11e      	bne.n	8006100 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80060ca:	2100      	movs	r1, #0
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f001 faff 	bl	80076d0 <USBD_LL_StallEP>
 80060d2:	e015      	b.n	8006100 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d108      	bne.n	80060fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	7afa      	ldrb	r2, [r7, #11]
 80060f4:	4611      	mov	r1, r2
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	4798      	blx	r3
 80060fa:	e001      	b.n	8006100 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060fc:	2302      	movs	r3, #2
 80060fe:	e000      	b.n	8006102 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	460b      	mov	r3, r1
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006118:	7afb      	ldrb	r3, [r7, #11]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d17f      	bne.n	800621e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3314      	adds	r3, #20
 8006122:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800612a:	2b02      	cmp	r3, #2
 800612c:	d15c      	bne.n	80061e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	429a      	cmp	r2, r3
 8006138:	d915      	bls.n	8006166 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 fec1 	bl	8006eda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006158:	2300      	movs	r3, #0
 800615a:	2200      	movs	r2, #0
 800615c:	2100      	movs	r1, #0
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f001 fb62 	bl	8007828 <USBD_LL_PrepareReceive>
 8006164:	e04e      	b.n	8006204 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	6912      	ldr	r2, [r2, #16]
 800616e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006172:	fb01 f202 	mul.w	r2, r1, r2
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d11c      	bne.n	80061b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006184:	429a      	cmp	r2, r3
 8006186:	d316      	bcc.n	80061b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006192:	429a      	cmp	r2, r3
 8006194:	d20f      	bcs.n	80061b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006196:	2200      	movs	r2, #0
 8006198:	2100      	movs	r1, #0
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fe9d 	bl	8006eda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061a8:	2300      	movs	r3, #0
 80061aa:	2200      	movs	r2, #0
 80061ac:	2100      	movs	r1, #0
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 fb3a 	bl	8007828 <USBD_LL_PrepareReceive>
 80061b4:	e026      	b.n	8006204 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d105      	bne.n	80061d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80061d8:	2180      	movs	r1, #128	; 0x80
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f001 fa78 	bl	80076d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fecf 	bl	8006f84 <USBD_CtlReceiveStatus>
 80061e6:	e00d      	b.n	8006204 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d004      	beq.n	80061fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80061fc:	2180      	movs	r1, #128	; 0x80
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f001 fa66 	bl	80076d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800620a:	2b01      	cmp	r3, #1
 800620c:	d11d      	bne.n	800624a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff fe81 	bl	8005f16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800621c:	e015      	b.n	800624a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006230:	2b03      	cmp	r3, #3
 8006232:	d108      	bne.n	8006246 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	7afa      	ldrb	r2, [r7, #11]
 800623e:	4611      	mov	r1, r2
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	4798      	blx	r3
 8006244:	e001      	b.n	800624a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006246:	2302      	movs	r3, #2
 8006248:	e000      	b.n	800624c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800625c:	2340      	movs	r3, #64	; 0x40
 800625e:	2200      	movs	r2, #0
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 f9ef 	bl	8007646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2240      	movs	r2, #64	; 0x40
 8006274:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006278:	2340      	movs	r3, #64	; 0x40
 800627a:	2200      	movs	r2, #0
 800627c:	2180      	movs	r1, #128	; 0x80
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 f9e1 	bl	8007646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2240      	movs	r2, #64	; 0x40
 800628e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	4611      	mov	r1, r2
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
  }

  return USBD_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2204      	movs	r2, #4
 800630c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632a:	2b04      	cmp	r3, #4
 800632c:	d105      	bne.n	800633a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr

08006346 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006354:	2b03      	cmp	r3, #3
 8006356:	d10b      	bne.n	8006370 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d005      	beq.n	80063a2 <USBD_StdDevReq+0x26>
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d84f      	bhi.n	800643a <USBD_StdDevReq+0xbe>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <USBD_StdDevReq+0x36>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d14b      	bne.n	800643a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
      break;
 80063b0:	e048      	b.n	8006444 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b09      	cmp	r3, #9
 80063b8:	d839      	bhi.n	800642e <USBD_StdDevReq+0xb2>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <USBD_StdDevReq+0x44>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	08006411 	.word	0x08006411
 80063c4:	08006425 	.word	0x08006425
 80063c8:	0800642f 	.word	0x0800642f
 80063cc:	0800641b 	.word	0x0800641b
 80063d0:	0800642f 	.word	0x0800642f
 80063d4:	080063f3 	.word	0x080063f3
 80063d8:	080063e9 	.word	0x080063e9
 80063dc:	0800642f 	.word	0x0800642f
 80063e0:	08006407 	.word	0x08006407
 80063e4:	080063fd 	.word	0x080063fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9dc 	bl	80067a8 <USBD_GetDescriptor>
          break;
 80063f0:	e022      	b.n	8006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fb3f 	bl	8006a78 <USBD_SetAddress>
          break;
 80063fa:	e01d      	b.n	8006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fb7e 	bl	8006b00 <USBD_SetConfig>
          break;
 8006404:	e018      	b.n	8006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fc07 	bl	8006c1c <USBD_GetConfig>
          break;
 800640e:	e013      	b.n	8006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fc37 	bl	8006c86 <USBD_GetStatus>
          break;
 8006418:	e00e      	b.n	8006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fc65 	bl	8006cec <USBD_SetFeature>
          break;
 8006422:	e009      	b.n	8006438 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fc74 	bl	8006d14 <USBD_ClrFeature>
          break;
 800642c:	e004      	b.n	8006438 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fccc 	bl	8006dce <USBD_CtlError>
          break;
 8006436:	bf00      	nop
      }
      break;
 8006438:	e004      	b.n	8006444 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fcc6 	bl	8006dce <USBD_CtlError>
      break;
 8006442:	bf00      	nop
  }

  return ret;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop

08006450 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d005      	beq.n	8006476 <USBD_StdItfReq+0x26>
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d82e      	bhi.n	80064cc <USBD_StdItfReq+0x7c>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <USBD_StdItfReq+0x26>
 8006472:	2b20      	cmp	r3, #32
 8006474:	d12a      	bne.n	80064cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647c:	3b01      	subs	r3, #1
 800647e:	2b02      	cmp	r3, #2
 8006480:	d81d      	bhi.n	80064be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	889b      	ldrh	r3, [r3, #4]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d813      	bhi.n	80064b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	88db      	ldrh	r3, [r3, #6]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d110      	bne.n	80064c8 <USBD_StdItfReq+0x78>
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fd56 	bl	8006f5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064b2:	e009      	b.n	80064c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fc89 	bl	8006dce <USBD_CtlError>
          break;
 80064bc:	e004      	b.n	80064c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fc84 	bl	8006dce <USBD_CtlError>
          break;
 80064c6:	e000      	b.n	80064ca <USBD_StdItfReq+0x7a>
          break;
 80064c8:	bf00      	nop
      }
      break;
 80064ca:	e004      	b.n	80064d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fc7d 	bl	8006dce <USBD_CtlError>
      break;
 80064d4:	bf00      	nop
  }

  return USBD_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	889b      	ldrh	r3, [r3, #4]
 80064f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d007      	beq.n	8006510 <USBD_StdEPReq+0x30>
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	f200 8146 	bhi.w	8006792 <USBD_StdEPReq+0x2b2>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <USBD_StdEPReq+0x40>
 800650a:	2b20      	cmp	r3, #32
 800650c:	f040 8141 	bne.w	8006792 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
      break;
 800651e:	e13d      	b.n	800679c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006528:	2b20      	cmp	r3, #32
 800652a:	d10a      	bne.n	8006542 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	e12d      	b.n	800679e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	785b      	ldrb	r3, [r3, #1]
 8006546:	2b03      	cmp	r3, #3
 8006548:	d007      	beq.n	800655a <USBD_StdEPReq+0x7a>
 800654a:	2b03      	cmp	r3, #3
 800654c:	f300 811b 	bgt.w	8006786 <USBD_StdEPReq+0x2a6>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d072      	beq.n	800663a <USBD_StdEPReq+0x15a>
 8006554:	2b01      	cmp	r3, #1
 8006556:	d03a      	beq.n	80065ce <USBD_StdEPReq+0xee>
 8006558:	e115      	b.n	8006786 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006560:	2b02      	cmp	r3, #2
 8006562:	d002      	beq.n	800656a <USBD_StdEPReq+0x8a>
 8006564:	2b03      	cmp	r3, #3
 8006566:	d015      	beq.n	8006594 <USBD_StdEPReq+0xb4>
 8006568:	e02b      	b.n	80065c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00c      	beq.n	800658a <USBD_StdEPReq+0xaa>
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d009      	beq.n	800658a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f001 f8a8 	bl	80076d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 f8a4 	bl	80076d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006588:	e020      	b.n	80065cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fc1e 	bl	8006dce <USBD_CtlError>
              break;
 8006592:	e01b      	b.n	80065cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	885b      	ldrh	r3, [r3, #2]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10e      	bne.n	80065ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800659c:	7bbb      	ldrb	r3, [r7, #14]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <USBD_StdEPReq+0xda>
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	2b80      	cmp	r3, #128	; 0x80
 80065a6:	d008      	beq.n	80065ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	88db      	ldrh	r3, [r3, #6]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f88b 	bl	80076d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fccf 	bl	8006f5e <USBD_CtlSendStatus>

              break;
 80065c0:	e004      	b.n	80065cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fc02 	bl	8006dce <USBD_CtlError>
              break;
 80065ca:	bf00      	nop
          }
          break;
 80065cc:	e0e0      	b.n	8006790 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d002      	beq.n	80065de <USBD_StdEPReq+0xfe>
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d015      	beq.n	8006608 <USBD_StdEPReq+0x128>
 80065dc:	e026      	b.n	800662c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00c      	beq.n	80065fe <USBD_StdEPReq+0x11e>
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b80      	cmp	r3, #128	; 0x80
 80065e8:	d009      	beq.n	80065fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 f86e 	bl	80076d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 f86a 	bl	80076d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065fc:	e01c      	b.n	8006638 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fbe4 	bl	8006dce <USBD_CtlError>
              break;
 8006606:	e017      	b.n	8006638 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	885b      	ldrh	r3, [r3, #2]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d112      	bne.n	8006636 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 f875 	bl	800770e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fc9a 	bl	8006f5e <USBD_CtlSendStatus>
              }
              break;
 800662a:	e004      	b.n	8006636 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fbcd 	bl	8006dce <USBD_CtlError>
              break;
 8006634:	e000      	b.n	8006638 <USBD_StdEPReq+0x158>
              break;
 8006636:	bf00      	nop
          }
          break;
 8006638:	e0aa      	b.n	8006790 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006640:	2b02      	cmp	r3, #2
 8006642:	d002      	beq.n	800664a <USBD_StdEPReq+0x16a>
 8006644:	2b03      	cmp	r3, #3
 8006646:	d032      	beq.n	80066ae <USBD_StdEPReq+0x1ce>
 8006648:	e097      	b.n	800677a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <USBD_StdEPReq+0x180>
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d004      	beq.n	8006660 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fbb8 	bl	8006dce <USBD_CtlError>
                break;
 800665e:	e091      	b.n	8006784 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006664:	2b00      	cmp	r3, #0
 8006666:	da0b      	bge.n	8006680 <USBD_StdEPReq+0x1a0>
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	3310      	adds	r3, #16
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4413      	add	r3, r2
 800667c:	3304      	adds	r3, #4
 800667e:	e00b      	b.n	8006698 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	3304      	adds	r3, #4
 8006698:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2202      	movs	r2, #2
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fbfb 	bl	8006ea2 <USBD_CtlSendData>
              break;
 80066ac:	e06a      	b.n	8006784 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da11      	bge.n	80066da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	f003 020f 	and.w	r2, r3, #15
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	3318      	adds	r3, #24
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d117      	bne.n	8006700 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fb7b 	bl	8006dce <USBD_CtlError>
                  break;
 80066d8:	e054      	b.n	8006784 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fb68 	bl	8006dce <USBD_CtlError>
                  break;
 80066fe:	e041      	b.n	8006784 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006704:	2b00      	cmp	r3, #0
 8006706:	da0b      	bge.n	8006720 <USBD_StdEPReq+0x240>
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	3310      	adds	r3, #16
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	4413      	add	r3, r2
 800671c:	3304      	adds	r3, #4
 800671e:	e00b      	b.n	8006738 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4413      	add	r3, r2
 8006736:	3304      	adds	r3, #4
 8006738:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <USBD_StdEPReq+0x266>
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d103      	bne.n	800674e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e00e      	b.n	800676c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fffa 	bl	800774c <USBD_LL_IsStallEP>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e002      	b.n	800676c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2202      	movs	r2, #2
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fb95 	bl	8006ea2 <USBD_CtlSendData>
              break;
 8006778:	e004      	b.n	8006784 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fb26 	bl	8006dce <USBD_CtlError>
              break;
 8006782:	bf00      	nop
          }
          break;
 8006784:	e004      	b.n	8006790 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fb20 	bl	8006dce <USBD_CtlError>
          break;
 800678e:	bf00      	nop
      }
      break;
 8006790:	e004      	b.n	800679c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fb1a 	bl	8006dce <USBD_CtlError>
      break;
 800679a:	bf00      	nop
  }

  return ret;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	885b      	ldrh	r3, [r3, #2]
 80067c2:	0a1b      	lsrs	r3, r3, #8
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	2b06      	cmp	r3, #6
 80067ca:	f200 8128 	bhi.w	8006a1e <USBD_GetDescriptor+0x276>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <USBD_GetDescriptor+0x2c>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	080067f1 	.word	0x080067f1
 80067d8:	08006809 	.word	0x08006809
 80067dc:	08006849 	.word	0x08006849
 80067e0:	08006a1f 	.word	0x08006a1f
 80067e4:	08006a1f 	.word	0x08006a1f
 80067e8:	080069bf 	.word	0x080069bf
 80067ec:	080069eb 	.word	0x080069eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
      break;
 8006806:	e112      	b.n	8006a2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7c1b      	ldrb	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10d      	bne.n	800682c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f107 0208 	add.w	r2, r7, #8
 800681c:	4610      	mov	r0, r2
 800681e:	4798      	blx	r3
 8006820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	2202      	movs	r2, #2
 8006828:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800682a:	e100      	b.n	8006a2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	f107 0208 	add.w	r2, r7, #8
 8006838:	4610      	mov	r0, r2
 800683a:	4798      	blx	r3
 800683c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	2202      	movs	r2, #2
 8006844:	701a      	strb	r2, [r3, #0]
      break;
 8006846:	e0f2      	b.n	8006a2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	885b      	ldrh	r3, [r3, #2]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b05      	cmp	r3, #5
 8006850:	f200 80ac 	bhi.w	80069ac <USBD_GetDescriptor+0x204>
 8006854:	a201      	add	r2, pc, #4	; (adr r2, 800685c <USBD_GetDescriptor+0xb4>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	08006875 	.word	0x08006875
 8006860:	080068a9 	.word	0x080068a9
 8006864:	080068dd 	.word	0x080068dd
 8006868:	08006911 	.word	0x08006911
 800686c:	08006945 	.word	0x08006945
 8006870:	08006979 	.word	0x08006979
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	7c12      	ldrb	r2, [r2, #16]
 800688c:	f107 0108 	add.w	r1, r7, #8
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006896:	e091      	b.n	80069bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa97 	bl	8006dce <USBD_CtlError>
            err++;
 80068a0:	7afb      	ldrb	r3, [r7, #11]
 80068a2:	3301      	adds	r3, #1
 80068a4:	72fb      	strb	r3, [r7, #11]
          break;
 80068a6:	e089      	b.n	80069bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7c12      	ldrb	r2, [r2, #16]
 80068c0:	f107 0108 	add.w	r1, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ca:	e077      	b.n	80069bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa7d 	bl	8006dce <USBD_CtlError>
            err++;
 80068d4:	7afb      	ldrb	r3, [r7, #11]
 80068d6:	3301      	adds	r3, #1
 80068d8:	72fb      	strb	r3, [r7, #11]
          break;
 80068da:	e06f      	b.n	80069bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	7c12      	ldrb	r2, [r2, #16]
 80068f4:	f107 0108 	add.w	r1, r7, #8
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
 80068fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068fe:	e05d      	b.n	80069bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa63 	bl	8006dce <USBD_CtlError>
            err++;
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	3301      	adds	r3, #1
 800690c:	72fb      	strb	r3, [r7, #11]
          break;
 800690e:	e055      	b.n	80069bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7c12      	ldrb	r2, [r2, #16]
 8006928:	f107 0108 	add.w	r1, r7, #8
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
 8006930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006932:	e043      	b.n	80069bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa49 	bl	8006dce <USBD_CtlError>
            err++;
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	3301      	adds	r3, #1
 8006940:	72fb      	strb	r3, [r7, #11]
          break;
 8006942:	e03b      	b.n	80069bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	7c12      	ldrb	r2, [r2, #16]
 800695c:	f107 0108 	add.w	r1, r7, #8
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
 8006964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006966:	e029      	b.n	80069bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa2f 	bl	8006dce <USBD_CtlError>
            err++;
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	3301      	adds	r3, #1
 8006974:	72fb      	strb	r3, [r7, #11]
          break;
 8006976:	e021      	b.n	80069bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	7c12      	ldrb	r2, [r2, #16]
 8006990:	f107 0108 	add.w	r1, r7, #8
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
 8006998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800699a:	e00f      	b.n	80069bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fa15 	bl	8006dce <USBD_CtlError>
            err++;
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	3301      	adds	r3, #1
 80069a8:	72fb      	strb	r3, [r7, #11]
          break;
 80069aa:	e007      	b.n	80069bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa0d 	bl	8006dce <USBD_CtlError>
          err++;
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	3301      	adds	r3, #1
 80069b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80069ba:	e038      	b.n	8006a2e <USBD_GetDescriptor+0x286>
 80069bc:	e037      	b.n	8006a2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	7c1b      	ldrb	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	f107 0208 	add.w	r2, r7, #8
 80069d2:	4610      	mov	r0, r2
 80069d4:	4798      	blx	r3
 80069d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069d8:	e029      	b.n	8006a2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f9f6 	bl	8006dce <USBD_CtlError>
        err++;
 80069e2:	7afb      	ldrb	r3, [r7, #11]
 80069e4:	3301      	adds	r3, #1
 80069e6:	72fb      	strb	r3, [r7, #11]
      break;
 80069e8:	e021      	b.n	8006a2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7c1b      	ldrb	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f107 0208 	add.w	r2, r7, #8
 80069fe:	4610      	mov	r0, r2
 8006a00:	4798      	blx	r3
 8006a02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	2207      	movs	r2, #7
 8006a0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a0c:	e00f      	b.n	8006a2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f9dc 	bl	8006dce <USBD_CtlError>
        err++;
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a1c:	e007      	b.n	8006a2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f9d4 	bl	8006dce <USBD_CtlError>
      err++;
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a2c:	bf00      	nop
  }

  if (err != 0U)
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11c      	bne.n	8006a6e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006a34:	893b      	ldrh	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d011      	beq.n	8006a5e <USBD_GetDescriptor+0x2b6>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	88db      	ldrh	r3, [r3, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00d      	beq.n	8006a5e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	88da      	ldrh	r2, [r3, #6]
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	bf28      	it	cs
 8006a4c:	4613      	movcs	r3, r2
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a52:	893b      	ldrh	r3, [r7, #8]
 8006a54:	461a      	mov	r2, r3
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa22 	bl	8006ea2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	88db      	ldrh	r3, [r3, #6]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa79 	bl	8006f5e <USBD_CtlSendStatus>
 8006a6c:	e000      	b.n	8006a70 <USBD_GetDescriptor+0x2c8>
    return;
 8006a6e:	bf00      	nop
    }
  }
}
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop

08006a78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	889b      	ldrh	r3, [r3, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d130      	bne.n	8006aec <USBD_SetAddress+0x74>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d12c      	bne.n	8006aec <USBD_SetAddress+0x74>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	885b      	ldrh	r3, [r3, #2]
 8006a96:	2b7f      	cmp	r3, #127	; 0x7f
 8006a98:	d828      	bhi.n	8006aec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	885b      	ldrh	r3, [r3, #2]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d104      	bne.n	8006aba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f98b 	bl	8006dce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab8:	e01d      	b.n	8006af6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7bfa      	ldrb	r2, [r7, #15]
 8006abe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fe6c 	bl	80077a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fa46 	bl	8006f5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae0:	e009      	b.n	8006af6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aea:	e004      	b.n	8006af6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f96d 	bl	8006dce <USBD_CtlError>
  }
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	885b      	ldrh	r3, [r3, #2]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	4b41      	ldr	r3, [pc, #260]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b14:	4b40      	ldr	r3, [pc, #256]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d904      	bls.n	8006b26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f955 	bl	8006dce <USBD_CtlError>
 8006b24:	e075      	b.n	8006c12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d002      	beq.n	8006b36 <USBD_SetConfig+0x36>
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d023      	beq.n	8006b7c <USBD_SetConfig+0x7c>
 8006b34:	e062      	b.n	8006bfc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006b36:	4b38      	ldr	r3, [pc, #224]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01a      	beq.n	8006b74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006b3e:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b50:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff f9e7 	bl	8005f2a <USBD_SetClassConfig>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d104      	bne.n	8006b6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f932 	bl	8006dce <USBD_CtlError>
            return;
 8006b6a:	e052      	b.n	8006c12 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f9f6 	bl	8006f5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006b72:	e04e      	b.n	8006c12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f9f2 	bl	8006f5e <USBD_CtlSendStatus>
        break;
 8006b7a:	e04a      	b.n	8006c12 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006b7c:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d112      	bne.n	8006baa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006b8c:	4b22      	ldr	r3, [pc, #136]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006b96:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <USBD_SetConfig+0x118>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff f9e3 	bl	8005f68 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f9db 	bl	8006f5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ba8:	e033      	b.n	8006c12 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <USBD_SetConfig+0x118>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d01d      	beq.n	8006bf4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff f9d1 	bl	8005f68 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <USBD_SetConfig+0x118>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bd0:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <USBD_SetConfig+0x118>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff f9a7 	bl	8005f2a <USBD_SetClassConfig>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d104      	bne.n	8006bec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8f2 	bl	8006dce <USBD_CtlError>
            return;
 8006bea:	e012      	b.n	8006c12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9b6 	bl	8006f5e <USBD_CtlSendStatus>
        break;
 8006bf2:	e00e      	b.n	8006c12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9b2 	bl	8006f5e <USBD_CtlSendStatus>
        break;
 8006bfa:	e00a      	b.n	8006c12 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8e5 	bl	8006dce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006c04:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <USBD_SetConfig+0x118>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff f9ac 	bl	8005f68 <USBD_ClrClassConfig>
        break;
 8006c10:	bf00      	nop
    }
  }
}
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	200001a0 	.word	0x200001a0

08006c1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	88db      	ldrh	r3, [r3, #6]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d004      	beq.n	8006c38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f8cc 	bl	8006dce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c36:	e022      	b.n	8006c7e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	dc02      	bgt.n	8006c48 <USBD_GetConfig+0x2c>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dc03      	bgt.n	8006c4e <USBD_GetConfig+0x32>
 8006c46:	e015      	b.n	8006c74 <USBD_GetConfig+0x58>
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d00b      	beq.n	8006c64 <USBD_GetConfig+0x48>
 8006c4c:	e012      	b.n	8006c74 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3308      	adds	r3, #8
 8006c58:	2201      	movs	r2, #1
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f920 	bl	8006ea2 <USBD_CtlSendData>
        break;
 8006c62:	e00c      	b.n	8006c7e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	2201      	movs	r2, #1
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f918 	bl	8006ea2 <USBD_CtlSendData>
        break;
 8006c72:	e004      	b.n	8006c7e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8a9 	bl	8006dce <USBD_CtlError>
        break;
 8006c7c:	bf00      	nop
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c96:	3b01      	subs	r3, #1
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d81e      	bhi.n	8006cda <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	88db      	ldrh	r3, [r3, #6]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d004      	beq.n	8006cae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f891 	bl	8006dce <USBD_CtlError>
        break;
 8006cac:	e01a      	b.n	8006ce4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f043 0202 	orr.w	r2, r3, #2
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	2202      	movs	r2, #2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f8e5 	bl	8006ea2 <USBD_CtlSendData>
      break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f876 	bl	8006dce <USBD_CtlError>
      break;
 8006ce2:	bf00      	nop
  }
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d106      	bne.n	8006d0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f929 	bl	8006f5e <USBD_CtlSendStatus>
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d24:	3b01      	subs	r3, #1
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d80b      	bhi.n	8006d42 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	885b      	ldrh	r3, [r3, #2]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d10c      	bne.n	8006d4c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f90f 	bl	8006f5e <USBD_CtlSendStatus>
      }
      break;
 8006d40:	e004      	b.n	8006d4c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f842 	bl	8006dce <USBD_CtlError>
      break;
 8006d4a:	e000      	b.n	8006d4e <USBD_ClrFeature+0x3a>
      break;
 8006d4c:	bf00      	nop
  }
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	785a      	ldrb	r2, [r3, #1]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	3302      	adds	r3, #2
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	3303      	adds	r3, #3
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	3305      	adds	r3, #5
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	3306      	adds	r3, #6
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	3307      	adds	r3, #7
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	80da      	strh	r2, [r3, #6]

}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006dd8:	2180      	movs	r1, #128	; 0x80
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fc78 	bl	80076d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006de0:	2100      	movs	r1, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fc74 	bl	80076d0 <USBD_LL_StallEP>
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d032      	beq.n	8006e6c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f834 	bl	8006e74 <USBD_GetLen>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	75fa      	strb	r2, [r7, #23]
 8006e20:	461a      	mov	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	4413      	add	r3, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	75fa      	strb	r2, [r7, #23]
 8006e32:	461a      	mov	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4413      	add	r3, r2
 8006e38:	2203      	movs	r2, #3
 8006e3a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006e3c:	e012      	b.n	8006e64 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	60fa      	str	r2, [r7, #12]
 8006e44:	7dfa      	ldrb	r2, [r7, #23]
 8006e46:	1c51      	adds	r1, r2, #1
 8006e48:	75f9      	strb	r1, [r7, #23]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	440a      	add	r2, r1
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	75fa      	strb	r2, [r7, #23]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4413      	add	r3, r2
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e8      	bne.n	8006e3e <USBD_GetString+0x4e>
    }
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006e80:	e005      	b.n	8006e8e <USBD_GetLen+0x1a>
  {
    len++;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	3301      	adds	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f5      	bne.n	8006e82 <USBD_GetLen+0xe>
  }

  return len;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	4613      	mov	r3, r2
 8006eae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006eb8:	88fa      	ldrh	r2, [r7, #6]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ec4:	88fb      	ldrh	r3, [r7, #6]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fc89 	bl	80077e2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ee8:	88fb      	ldrh	r3, [r7, #6]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	2100      	movs	r1, #0
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fc77 	bl	80077e2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2203      	movs	r2, #3
 8006f10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f14:	88fa      	ldrh	r2, [r7, #6]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006f1c:	88fa      	ldrh	r2, [r7, #6]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	2100      	movs	r1, #0
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fc7c 	bl	8007828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	4613      	mov	r3, r2
 8006f46:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fc6a 	bl	8007828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2200      	movs	r2, #0
 8006f72:	2100      	movs	r1, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc34 	bl	80077e2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2205      	movs	r2, #5
 8006f90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f94:	2300      	movs	r3, #0
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fc44 	bl	8007828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4912      	ldr	r1, [pc, #72]	; (8006ffc <MX_USB_DEVICE_Init+0x50>)
 8006fb4:	4812      	ldr	r0, [pc, #72]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fb6:	f7fe ff5e 	bl	8005e76 <USBD_Init>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006fc0:	f7f9 f990 	bl	80002e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006fc4:	490f      	ldr	r1, [pc, #60]	; (8007004 <MX_USB_DEVICE_Init+0x58>)
 8006fc6:	480e      	ldr	r0, [pc, #56]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fc8:	f7fe ff80 	bl	8005ecc <USBD_RegisterClass>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006fd2:	f7f9 f987 	bl	80002e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fd6:	490c      	ldr	r1, [pc, #48]	; (8007008 <MX_USB_DEVICE_Init+0x5c>)
 8006fd8:	4809      	ldr	r0, [pc, #36]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fda:	f7fe feb1 	bl	8005d40 <USBD_CDC_RegisterInterface>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006fe4:	f7f9 f97e 	bl	80002e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fe8:	4805      	ldr	r0, [pc, #20]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fea:	f7fe ff88 	bl	8005efe <USBD_Start>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ff4:	f7f9 f976 	bl	80002e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ff8:	bf00      	nop
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000130 	.word	0x20000130
 8007000:	200001a4 	.word	0x200001a4
 8007004:	2000001c 	.word	0x2000001c
 8007008:	20000120 	.word	0x20000120

0800700c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007010:	2200      	movs	r2, #0
 8007012:	4905      	ldr	r1, [pc, #20]	; (8007028 <CDC_Init_FS+0x1c>)
 8007014:	4805      	ldr	r0, [pc, #20]	; (800702c <CDC_Init_FS+0x20>)
 8007016:	f7fe fea9 	bl	8005d6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800701a:	4905      	ldr	r1, [pc, #20]	; (8007030 <CDC_Init_FS+0x24>)
 800701c:	4803      	ldr	r0, [pc, #12]	; (800702c <CDC_Init_FS+0x20>)
 800701e:	f7fe febe 	bl	8005d9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007022:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000850 	.word	0x20000850
 800702c:	200001a4 	.word	0x200001a4
 8007030:	20000468 	.word	0x20000468

08007034 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007038:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800703a:	4618      	mov	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr
	...

08007044 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
 8007050:	4613      	mov	r3, r2
 8007052:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b23      	cmp	r3, #35	; 0x23
 8007058:	d84a      	bhi.n	80070f0 <CDC_Control_FS+0xac>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <CDC_Control_FS+0x1c>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	080070f1 	.word	0x080070f1
 8007064:	080070f1 	.word	0x080070f1
 8007068:	080070f1 	.word	0x080070f1
 800706c:	080070f1 	.word	0x080070f1
 8007070:	080070f1 	.word	0x080070f1
 8007074:	080070f1 	.word	0x080070f1
 8007078:	080070f1 	.word	0x080070f1
 800707c:	080070f1 	.word	0x080070f1
 8007080:	080070f1 	.word	0x080070f1
 8007084:	080070f1 	.word	0x080070f1
 8007088:	080070f1 	.word	0x080070f1
 800708c:	080070f1 	.word	0x080070f1
 8007090:	080070f1 	.word	0x080070f1
 8007094:	080070f1 	.word	0x080070f1
 8007098:	080070f1 	.word	0x080070f1
 800709c:	080070f1 	.word	0x080070f1
 80070a0:	080070f1 	.word	0x080070f1
 80070a4:	080070f1 	.word	0x080070f1
 80070a8:	080070f1 	.word	0x080070f1
 80070ac:	080070f1 	.word	0x080070f1
 80070b0:	080070f1 	.word	0x080070f1
 80070b4:	080070f1 	.word	0x080070f1
 80070b8:	080070f1 	.word	0x080070f1
 80070bc:	080070f1 	.word	0x080070f1
 80070c0:	080070f1 	.word	0x080070f1
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	080070f1 	.word	0x080070f1
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	080070f1 	.word	0x080070f1
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	080070f1 	.word	0x080070f1
 80070e8:	080070f1 	.word	0x080070f1
 80070ec:	080070f1 	.word	0x080070f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070f0:	bf00      	nop
  }

  return (USBD_OK);
 80070f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop

08007100 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(Buf[0] == '1')
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b31      	cmp	r3, #49	; 0x31
 8007110:	d111      	bne.n	8007136 <CDC_Receive_FS+0x36>
	{
		uint8_t buffer[] = "Hello, World!\r\n";
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <CDC_Receive_FS+0x64>)
 8007114:	f107 0408 	add.w	r4, r7, #8
 8007118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800711a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		CDC_Transmit_FS(buffer, sizeof(buffer));
 800711e:	f107 0308 	add.w	r3, r7, #8
 8007122:	2110      	movs	r1, #16
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f823 	bl	8007170 <CDC_Transmit_FS>
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800712a:	2200      	movs	r2, #0
 800712c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007130:	480d      	ldr	r0, [pc, #52]	; (8007168 <CDC_Receive_FS+0x68>)
 8007132:	f7f9 fc85 	bl	8000a40 <HAL_GPIO_WritePin>
	}
	if(Buf[0] == '0')
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b30      	cmp	r3, #48	; 0x30
 800713c:	d105      	bne.n	800714a <CDC_Receive_FS+0x4a>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800713e:	2201      	movs	r2, #1
 8007140:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007144:	4808      	ldr	r0, [pc, #32]	; (8007168 <CDC_Receive_FS+0x68>)
 8007146:	f7f9 fc7b 	bl	8000a40 <HAL_GPIO_WritePin>
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4807      	ldr	r0, [pc, #28]	; (800716c <CDC_Receive_FS+0x6c>)
 800714e:	f7fe fe26 	bl	8005d9e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007152:	4806      	ldr	r0, [pc, #24]	; (800716c <CDC_Receive_FS+0x6c>)
 8007154:	f7fe fe65 	bl	8005e22 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8007158:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800715a:	4618      	mov	r0, r3
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	bd90      	pop	{r4, r7, pc}
 8007162:	bf00      	nop
 8007164:	080079c4 	.word	0x080079c4
 8007168:	40011000 	.word	0x40011000
 800716c:	200001a4 	.word	0x200001a4

08007170 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007180:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <CDC_Transmit_FS+0x48>)
 8007182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007186:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007192:	2301      	movs	r3, #1
 8007194:	e00b      	b.n	80071ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	461a      	mov	r2, r3
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4806      	ldr	r0, [pc, #24]	; (80071b8 <CDC_Transmit_FS+0x48>)
 800719e:	f7fe fde5 	bl	8005d6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80071a2:	4805      	ldr	r0, [pc, #20]	; (80071b8 <CDC_Transmit_FS+0x48>)
 80071a4:	f7fe fe0e 	bl	8005dc4 <USBD_CDC_TransmitPacket>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200001a4 	.word	0x200001a4

080071bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2212      	movs	r2, #18
 80071cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071ce:	4b03      	ldr	r3, [pc, #12]	; (80071dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	2000014c 	.word	0x2000014c

080071e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2204      	movs	r2, #4
 80071f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071f2:	4b03      	ldr	r3, [pc, #12]	; (8007200 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20000160 	.word	0x20000160

08007204 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d105      	bne.n	8007222 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4907      	ldr	r1, [pc, #28]	; (8007238 <USBD_FS_ProductStrDescriptor+0x34>)
 800721a:	4808      	ldr	r0, [pc, #32]	; (800723c <USBD_FS_ProductStrDescriptor+0x38>)
 800721c:	f7ff fde8 	bl	8006df0 <USBD_GetString>
 8007220:	e004      	b.n	800722c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	4904      	ldr	r1, [pc, #16]	; (8007238 <USBD_FS_ProductStrDescriptor+0x34>)
 8007226:	4805      	ldr	r0, [pc, #20]	; (800723c <USBD_FS_ProductStrDescriptor+0x38>)
 8007228:	f7ff fde2 	bl	8006df0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000c38 	.word	0x20000c38
 800723c:	080079d4 	.word	0x080079d4

08007240 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	6039      	str	r1, [r7, #0]
 800724a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	4904      	ldr	r1, [pc, #16]	; (8007260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007250:	4804      	ldr	r0, [pc, #16]	; (8007264 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007252:	f7ff fdcd 	bl	8006df0 <USBD_GetString>
  return USBD_StrDesc;
 8007256:	4b02      	ldr	r3, [pc, #8]	; (8007260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000c38 	.word	0x20000c38
 8007264:	080079e4 	.word	0x080079e4

08007268 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	6039      	str	r1, [r7, #0]
 8007272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	221a      	movs	r2, #26
 8007278:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800727a:	f000 f843 	bl	8007304 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800727e:	4b02      	ldr	r3, [pc, #8]	; (8007288 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000164 	.word	0x20000164

0800728c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	6039      	str	r1, [r7, #0]
 8007296:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d105      	bne.n	80072aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	4907      	ldr	r1, [pc, #28]	; (80072c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072a2:	4808      	ldr	r0, [pc, #32]	; (80072c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072a4:	f7ff fda4 	bl	8006df0 <USBD_GetString>
 80072a8:	e004      	b.n	80072b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4904      	ldr	r1, [pc, #16]	; (80072c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072ae:	4805      	ldr	r0, [pc, #20]	; (80072c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072b0:	f7ff fd9e 	bl	8006df0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072b4:	4b02      	ldr	r3, [pc, #8]	; (80072c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000c38 	.word	0x20000c38
 80072c4:	080079f8 	.word	0x080079f8

080072c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d105      	bne.n	80072e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	4907      	ldr	r1, [pc, #28]	; (80072fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072de:	4808      	ldr	r0, [pc, #32]	; (8007300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072e0:	f7ff fd86 	bl	8006df0 <USBD_GetString>
 80072e4:	e004      	b.n	80072f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	4904      	ldr	r1, [pc, #16]	; (80072fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072ea:	4805      	ldr	r0, [pc, #20]	; (8007300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072ec:	f7ff fd80 	bl	8006df0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072f0:	4b02      	ldr	r3, [pc, #8]	; (80072fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000c38 	.word	0x20000c38
 8007300:	08007a04 	.word	0x08007a04

08007304 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <Get_SerialNum+0x44>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007310:	4b0e      	ldr	r3, [pc, #56]	; (800734c <Get_SerialNum+0x48>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007316:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <Get_SerialNum+0x4c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800732a:	2208      	movs	r2, #8
 800732c:	4909      	ldr	r1, [pc, #36]	; (8007354 <Get_SerialNum+0x50>)
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f814 	bl	800735c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007334:	2204      	movs	r2, #4
 8007336:	4908      	ldr	r1, [pc, #32]	; (8007358 <Get_SerialNum+0x54>)
 8007338:	68b8      	ldr	r0, [r7, #8]
 800733a:	f000 f80f 	bl	800735c <IntToUnicode>
  }
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	1ffff7e8 	.word	0x1ffff7e8
 800734c:	1ffff7ec 	.word	0x1ffff7ec
 8007350:	1ffff7f0 	.word	0x1ffff7f0
 8007354:	20000166 	.word	0x20000166
 8007358:	20000176 	.word	0x20000176

0800735c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
 8007372:	e027      	b.n	80073c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	0f1b      	lsrs	r3, r3, #28
 8007378:	2b09      	cmp	r3, #9
 800737a:	d80b      	bhi.n	8007394 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	0f1b      	lsrs	r3, r3, #28
 8007380:	b2da      	uxtb	r2, r3
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	4619      	mov	r1, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	440b      	add	r3, r1
 800738c:	3230      	adds	r2, #48	; 0x30
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	e00a      	b.n	80073aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	0f1b      	lsrs	r3, r3, #28
 8007398:	b2da      	uxtb	r2, r3
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4619      	mov	r1, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	440b      	add	r3, r1
 80073a4:	3237      	adds	r2, #55	; 0x37
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	3301      	adds	r3, #1
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	3301      	adds	r3, #1
 80073c2:	75fb      	strb	r3, [r7, #23]
 80073c4:	7dfa      	ldrb	r2, [r7, #23]
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d3d3      	bcc.n	8007374 <IntToUnicode+0x18>
  }
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a0d      	ldr	r2, [pc, #52]	; (800741c <HAL_PCD_MspInit+0x44>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d113      	bne.n	8007412 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <HAL_PCD_MspInit+0x48>)
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	4a0c      	ldr	r2, [pc, #48]	; (8007420 <HAL_PCD_MspInit+0x48>)
 80073f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073f4:	61d3      	str	r3, [r2, #28]
 80073f6:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <HAL_PCD_MspInit+0x48>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	2014      	movs	r0, #20
 8007408:	f7f9 f95f 	bl	80006ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800740c:	2014      	movs	r0, #20
 800740e:	f7f9 f978 	bl	8000702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40005c00 	.word	0x40005c00
 8007420:	40021000 	.word	0x40021000

08007424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f7fe fda7 	bl	8005f8e <USBD_LL_SetupStage>
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800745a:	78fa      	ldrb	r2, [r7, #3]
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	440b      	add	r3, r1
 8007468:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	4619      	mov	r1, r3
 8007472:	f7fe fdd9 	bl	8006028 <USBD_LL_DataOutStage>
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	440b      	add	r3, r1
 800749e:	333c      	adds	r3, #60	; 0x3c
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	4619      	mov	r1, r3
 80074a6:	f7fe fe30 	bl	800610a <USBD_LL_DataInStage>
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe ff40 	bl	8006346 <USBD_LL_SOF>
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074d6:	2301      	movs	r3, #1
 80074d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d001      	beq.n	80074e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074e2:	f7f8 feff 	bl	80002e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80074ec:	7bfa      	ldrb	r2, [r7, #15]
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fef0 	bl	80062d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe fea9 	bl	8006254 <USBD_LL_Reset>
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe feea 	bl	80062f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007528:	4b04      	ldr	r3, [pc, #16]	; (800753c <HAL_PCD_SuspendCallback+0x30>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4a03      	ldr	r2, [pc, #12]	; (800753c <HAL_PCD_SuspendCallback+0x30>)
 800752e:	f043 0306 	orr.w	r3, r3, #6
 8007532:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	e000ed00 	.word	0xe000ed00

08007540 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fee4 	bl	800631c <USBD_LL_Resume>
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007564:	4a28      	ldr	r2, [pc, #160]	; (8007608 <USBD_LL_Init+0xac>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a26      	ldr	r2, [pc, #152]	; (8007608 <USBD_LL_Init+0xac>)
 8007570:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <USBD_LL_Init+0xac>)
 8007576:	4a25      	ldr	r2, [pc, #148]	; (800760c <USBD_LL_Init+0xb0>)
 8007578:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800757a:	4b23      	ldr	r3, [pc, #140]	; (8007608 <USBD_LL_Init+0xac>)
 800757c:	2208      	movs	r2, #8
 800757e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <USBD_LL_Init+0xac>)
 8007582:	2202      	movs	r2, #2
 8007584:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007586:	4b20      	ldr	r3, [pc, #128]	; (8007608 <USBD_LL_Init+0xac>)
 8007588:	2200      	movs	r2, #0
 800758a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <USBD_LL_Init+0xac>)
 800758e:	2200      	movs	r2, #0
 8007590:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007592:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <USBD_LL_Init+0xac>)
 8007594:	2200      	movs	r2, #0
 8007596:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007598:	481b      	ldr	r0, [pc, #108]	; (8007608 <USBD_LL_Init+0xac>)
 800759a:	f7f9 fa69 	bl	8000a70 <HAL_PCD_Init>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80075a4:	f7f8 fe9e 	bl	80002e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075ae:	2318      	movs	r3, #24
 80075b0:	2200      	movs	r2, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	f7fa fedd 	bl	8002372 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075be:	2358      	movs	r3, #88	; 0x58
 80075c0:	2200      	movs	r2, #0
 80075c2:	2180      	movs	r1, #128	; 0x80
 80075c4:	f7fa fed5 	bl	8002372 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075ce:	23c0      	movs	r3, #192	; 0xc0
 80075d0:	2200      	movs	r2, #0
 80075d2:	2181      	movs	r1, #129	; 0x81
 80075d4:	f7fa fecd 	bl	8002372 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80075e2:	2200      	movs	r2, #0
 80075e4:	2101      	movs	r1, #1
 80075e6:	f7fa fec4 	bl	8002372 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075f4:	2200      	movs	r2, #0
 80075f6:	2182      	movs	r1, #130	; 0x82
 80075f8:	f7fa febb 	bl	8002372 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000e38 	.word	0x20000e38
 800760c:	40005c00 	.word	0x40005c00

08007610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007626:	4618      	mov	r0, r3
 8007628:	f7f9 fb2d 	bl	8000c86 <HAL_PCD_Start>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f94e 	bl	80078d4 <USBD_Get_USB_Status>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763c:	7bbb      	ldrb	r3, [r7, #14]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	461a      	mov	r2, r3
 8007654:	4603      	mov	r3, r0
 8007656:	70fb      	strb	r3, [r7, #3]
 8007658:	460b      	mov	r3, r1
 800765a:	70bb      	strb	r3, [r7, #2]
 800765c:	4613      	mov	r3, r2
 800765e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800766e:	78bb      	ldrb	r3, [r7, #2]
 8007670:	883a      	ldrh	r2, [r7, #0]
 8007672:	78f9      	ldrb	r1, [r7, #3]
 8007674:	f7f9 fca5 	bl	8000fc2 <HAL_PCD_EP_Open>
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f928 	bl	80078d4 <USBD_Get_USB_Status>
 8007684:	4603      	mov	r3, r0
 8007686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007688:	7bbb      	ldrb	r3, [r7, #14]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7f9 fcec 	bl	800108e <HAL_PCD_EP_Close>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 f909 	bl	80078d4 <USBD_Get_USB_Status>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7f9 fdac 	bl	800124c <HAL_PCD_EP_SetStall>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f8ea 	bl	80078d4 <USBD_Get_USB_Status>
 8007700:	4603      	mov	r3, r0
 8007702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007704:	7bbb      	ldrb	r3, [r7, #14]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f7f9 fded 	bl	800130c <HAL_PCD_EP_ClrStall>
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	4618      	mov	r0, r3
 800773a:	f000 f8cb 	bl	80078d4 <USBD_Get_USB_Status>
 800773e:	4603      	mov	r3, r0
 8007740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007742:	7bbb      	ldrb	r3, [r7, #14]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800775e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007764:	2b00      	cmp	r3, #0
 8007766:	da0c      	bge.n	8007782 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	440b      	add	r3, r1
 800777c:	3302      	adds	r3, #2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	e00b      	b.n	800779a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007788:	68f9      	ldr	r1, [r7, #12]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	440b      	add	r3, r1
 8007794:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007798:	781b      	ldrb	r3, [r3, #0]
  }
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr

080077a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	4611      	mov	r1, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f9 fbd8 	bl	8000f78 <HAL_PCD_SetAddress>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 f880 	bl	80078d4 <USBD_Get_USB_Status>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	461a      	mov	r2, r3
 80077ee:	460b      	mov	r3, r1
 80077f0:	72fb      	strb	r3, [r7, #11]
 80077f2:	4613      	mov	r3, r2
 80077f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007804:	893b      	ldrh	r3, [r7, #8]
 8007806:	7af9      	ldrb	r1, [r7, #11]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	f7f9 fcdc 	bl	80011c6 <HAL_PCD_EP_Transmit>
 800780e:	4603      	mov	r3, r0
 8007810:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f85d 	bl	80078d4 <USBD_Get_USB_Status>
 800781a:	4603      	mov	r3, r0
 800781c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800781e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	461a      	mov	r2, r3
 8007834:	460b      	mov	r3, r1
 8007836:	72fb      	strb	r3, [r7, #11]
 8007838:	4613      	mov	r3, r2
 800783a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800784a:	893b      	ldrh	r3, [r7, #8]
 800784c:	7af9      	ldrb	r1, [r7, #11]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	f7f9 fc65 	bl	800111e <HAL_PCD_EP_Receive>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f83a 	bl	80078d4 <USBD_Get_USB_Status>
 8007860:	4603      	mov	r3, r0
 8007862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007864:	7dbb      	ldrb	r3, [r7, #22]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7f9 fc87 	bl	8001198 <HAL_PCD_EP_GetRxCount>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800789c:	4b02      	ldr	r3, [pc, #8]	; (80078a8 <USBD_static_malloc+0x14>)
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	20001124 	.word	0x20001124

080078ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr

080078d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d817      	bhi.n	8007918 <USBD_Get_USB_Status+0x44>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBD_Get_USB_Status+0x1c>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007901 	.word	0x08007901
 80078f4:	08007907 	.word	0x08007907
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007913 	.word	0x08007913
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
    break;
 8007904:	e00b      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007906:	2302      	movs	r3, #2
 8007908:	73fb      	strb	r3, [r7, #15]
    break;
 800790a:	e008      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
    break;
 8007910:	e005      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007912:	2302      	movs	r3, #2
 8007914:	73fb      	strb	r3, [r7, #15]
    break;
 8007916:	e002      	b.n	800791e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007918:	2302      	movs	r3, #2
 800791a:	73fb      	strb	r3, [r7, #15]
    break;
 800791c:	bf00      	nop
  }
  return usb_status;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop

0800792c <__libc_init_array>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	2600      	movs	r6, #0
 8007930:	4d0c      	ldr	r5, [pc, #48]	; (8007964 <__libc_init_array+0x38>)
 8007932:	4c0d      	ldr	r4, [pc, #52]	; (8007968 <__libc_init_array+0x3c>)
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	42a6      	cmp	r6, r4
 800793a:	d109      	bne.n	8007950 <__libc_init_array+0x24>
 800793c:	f000 f822 	bl	8007984 <_init>
 8007940:	2600      	movs	r6, #0
 8007942:	4d0a      	ldr	r5, [pc, #40]	; (800796c <__libc_init_array+0x40>)
 8007944:	4c0a      	ldr	r4, [pc, #40]	; (8007970 <__libc_init_array+0x44>)
 8007946:	1b64      	subs	r4, r4, r5
 8007948:	10a4      	asrs	r4, r4, #2
 800794a:	42a6      	cmp	r6, r4
 800794c:	d105      	bne.n	800795a <__libc_init_array+0x2e>
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	f855 3b04 	ldr.w	r3, [r5], #4
 8007954:	4798      	blx	r3
 8007956:	3601      	adds	r6, #1
 8007958:	e7ee      	b.n	8007938 <__libc_init_array+0xc>
 800795a:	f855 3b04 	ldr.w	r3, [r5], #4
 800795e:	4798      	blx	r3
 8007960:	3601      	adds	r6, #1
 8007962:	e7f2      	b.n	800794a <__libc_init_array+0x1e>
 8007964:	08007a24 	.word	0x08007a24
 8007968:	08007a24 	.word	0x08007a24
 800796c:	08007a24 	.word	0x08007a24
 8007970:	08007a28 	.word	0x08007a28

08007974 <memset>:
 8007974:	4603      	mov	r3, r0
 8007976:	4402      	add	r2, r0
 8007978:	4293      	cmp	r3, r2
 800797a:	d100      	bne.n	800797e <memset+0xa>
 800797c:	4770      	bx	lr
 800797e:	f803 1b01 	strb.w	r1, [r3], #1
 8007982:	e7f9      	b.n	8007978 <memset+0x4>

08007984 <_init>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr

08007990 <_fini>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr
